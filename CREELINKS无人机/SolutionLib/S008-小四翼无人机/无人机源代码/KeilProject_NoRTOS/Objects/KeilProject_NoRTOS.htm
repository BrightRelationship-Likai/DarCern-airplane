<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\KeilProject_NoRTOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\KeilProject_NoRTOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sun Nov 05 09:01:13 2017
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ceFilterIMU_filter &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[12c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">NMI_Handler</a><BR>
 <LI><a href="#[10]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">HardFault_Handler</a><BR>
 <LI><a href="#[11]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">MemManage_Handler</a><BR>
 <LI><a href="#[12]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">BusFault_Handler</a><BR>
 <LI><a href="#[13]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">UsageFault_Handler</a><BR>
 <LI><a href="#[14]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">SVC_Handler</a><BR>
 <LI><a href="#[15]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">DebugMon_Handler</a><BR>
 <LI><a href="#[16]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">PendSV_Handler</a><BR>
 <LI><a href="#[17]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">SysTick_Handler</a><BR>
 <LI><a href="#[2a]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">DMA1_Channel1_IRQHandler</a> from cead.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DMA1_Channel2_IRQHandler</a> from ceuart.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">DMA1_Channel4_IRQHandler</a> from ceuart.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">DMA1_Channel7_IRQHandler</a> from ceuart.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">DMA2_Channel3_IRQHandler</a> from ceda.o(i.DMA2_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">DMA2_Channel4_5_IRQHandler</a> from ceda.o(i.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">EXTI0_IRQHandler</a> from ceint.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">EXTI15_10_IRQHandler</a> from ceint.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">EXTI1_IRQHandler</a> from ceint.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">EXTI2_IRQHandler</a> from ceint.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI3_IRQHandler</a> from ceint.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">EXTI4_IRQHandler</a> from ceint.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">EXTI9_5_IRQHandler</a> from ceint.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">SysTick_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[1a]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM1_UP_IRQHandler</a> from cetimer.o(i.TIM1_UP_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">TIM2_IRQHandler</a> from ceccp.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM3_IRQHandler</a> from cetimer.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM4_IRQHandler</a> from cetimer.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM5_IRQHandler</a> from cetimer.o(i.TIM5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">TIM6_IRQHandler</a> from cetimer.o(i.TIM6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">TIM7_IRQHandler</a> from cetimer.o(i.TIM7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM8_UP_IRQHandler</a> from cetimer.o(i.TIM8_UP_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">TIM_OC1Init</a> from stm32f10x_tim.o(i.TIM_OC1Init) referenced 2 times from cepwm.o(.data)
 <LI><a href="#[8]">TIM_OC1PreloadConfig</a> from stm32f10x_tim.o(i.TIM_OC1PreloadConfig) referenced 2 times from cepwm.o(.data)
 <LI><a href="#[5]">TIM_OC2Init</a> from stm32f10x_tim.o(i.TIM_OC2Init) referenced 2 times from cepwm.o(.data)
 <LI><a href="#[9]">TIM_OC2PreloadConfig</a> from stm32f10x_tim.o(i.TIM_OC2PreloadConfig) referenced 2 times from cepwm.o(.data)
 <LI><a href="#[6]">TIM_OC3Init</a> from stm32f10x_tim.o(i.TIM_OC3Init) referenced 2 times from cepwm.o(.data)
 <LI><a href="#[a]">TIM_OC3PreloadConfig</a> from stm32f10x_tim.o(i.TIM_OC3PreloadConfig) referenced 2 times from cepwm.o(.data)
 <LI><a href="#[7]">TIM_OC4Init</a> from stm32f10x_tim.o(i.TIM_OC4Init) referenced 2 times from cepwm.o(.data)
 <LI><a href="#[b]">TIM_OC4PreloadConfig</a> from stm32f10x_tim.o(i.TIM_OC4PreloadConfig) referenced 2 times from cepwm.o(.data)
 <LI><a href="#[4c]">UART4_IRQHandler</a> from ceuart.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">UART5_IRQHandler</a> from ceuart.o(i.UART5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">USART1_IRQHandler</a> from ceuart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">USART2_IRQHandler</a> from ceuart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">USART3_IRQHandler</a> from ceuart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[119]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[bc]">cTicker_stop</a> from ceticker.o(i.cTicker_stop) referenced from ceticker.o(.constdata)
 <LI><a href="#[9c]">ceAbs</a> from ceextra.o(i.ceAbs) referenced from ceextra.o(.constdata)
 <LI><a href="#[60]">ceAd_getConvertValue</a> from cead.o(i.ceAd_getConvertValue) referenced from cead.o(.constdata)
 <LI><a href="#[5f]">ceAd_initial</a> from cead.o(i.ceAd_initial) referenced from cead.o(.constdata)
 <LI><a href="#[a1]">ceAtoi</a> from ceextra.o(i.ceAtoi) referenced from ceextra.o(.constdata)
 <LI><a href="#[bf]">ceBeepNSrc_initial</a> from cebeepnsrc.o(i.ceBeepNSrc_initial) referenced from cebeepnsrc.o(.constdata)
 <LI><a href="#[c0]">ceBeepNSrc_initialByPwm</a> from cebeepnsrc.o(i.ceBeepNSrc_initialByPwm) referenced from cebeepnsrc.o(.constdata)
 <LI><a href="#[c1]">ceBeepNSrc_say</a> from cebeepnsrc.o(i.ceBeepNSrc_say) referenced from cebeepnsrc.o(.constdata)
 <LI><a href="#[57]">ceBtnx1_callBackInt</a> from cebtnx1.o(i.ceBtnx1_callBackInt) referenced from cebtnx1.o(i.ceBtnx1_initialByInt)
 <LI><a href="#[56]">ceBtnx1_callBackTick</a> from cebtnx1.o(i.ceBtnx1_callBackTick) referenced from cebtnx1.o(i.ceBtnx1_initialByGpio)
 <LI><a href="#[c4]">ceBtnx1_getStatus</a> from cebtnx1.o(i.ceBtnx1_getStatus) referenced from cebtnx1.o(.constdata)
 <LI><a href="#[c2]">ceBtnx1_initialByGpio</a> from cebtnx1.o(i.ceBtnx1_initialByGpio) referenced from cebtnx1.o(.constdata)
 <LI><a href="#[c3]">ceBtnx1_initialByInt</a> from cebtnx1.o(i.ceBtnx1_initialByInt) referenced from cebtnx1.o(.constdata)
 <LI><a href="#[c5]">ceBtnx1_waitForPressDown</a> from cebtnx1.o(i.ceBtnx1_waitForPressDown) referenced from cebtnx1.o(.constdata)
 <LI><a href="#[c6]">ceBtnx1_waitForPressUp</a> from cebtnx1.o(i.ceBtnx1_waitForPressUp) referenced from cebtnx1.o(.constdata)
 <LI><a href="#[9b]">ceDebug_getRecvData</a> from cedebug.o(i.ceDebug_getRecvData) referenced from cedebug.o(.constdata)
 <LI><a href="#[9a]">ceDebug_getRecvDataCount</a> from cedebug.o(i.ceDebug_getRecvDataCount) referenced from cedebug.o(.constdata)
 <LI><a href="#[95]">ceDebug_initial</a> from cedebug.o(i.ceDebug_initial) referenced from cedebug.o(.constdata)
 <LI><a href="#[98]">ceDebug_printf</a> from cedebug.o(i.ceDebug_printf) referenced from cedebug.o(.constdata)
 <LI><a href="#[96]">ceDebug_registerAppendString</a> from cedebug.o(i.ceDebug_registerAppendString) referenced from cedebug.o(.constdata)
 <LI><a href="#[99]">ceDebug_sprintf</a> from cedebug.o(i.ceDebug_sprintf) referenced from cedebug.o(.constdata)
 <LI><a href="#[97]">ceDebug_unRegisterAppendString</a> from cedebug.o(i.ceDebug_unRegisterAppendString) referenced from cedebug.o(.constdata)
 <LI><a href="#[b0]">ceDoubleFifo_clear</a> from ceextra.o(i.ceDoubleFifo_clear) referenced from ceextra.o(.constdata)
 <LI><a href="#[ac]">ceDoubleFifo_getCanReadSize</a> from ceextra.o(i.ceDoubleFifo_getCanReadSize) referenced from ceextra.o(.constdata)
 <LI><a href="#[ad]">ceDoubleFifo_getCanWriteSize</a> from ceextra.o(i.ceDoubleFifo_getCanWriteSize) referenced from ceextra.o(.constdata)
 <LI><a href="#[aa]">ceDoubleFifo_initial</a> from ceextra.o(i.ceDoubleFifo_initial) referenced from ceextra.o(.constdata)
 <LI><a href="#[ab]">ceDoubleFifo_isEmpty</a> from ceextra.o(i.ceDoubleFifo_isEmpty) referenced from ceextra.o(.constdata)
 <LI><a href="#[af]">ceDoubleFifo_read</a> from ceextra.o(i.ceDoubleFifo_read) referenced from ceextra.o(.constdata)
 <LI><a href="#[ae]">ceDoubleFifo_write</a> from ceextra.o(i.ceDoubleFifo_write) referenced from ceextra.o(.constdata)
 <LI><a href="#[d6]">ceESP8266_checkCanConnectSsidIsExist</a> from ceesp8266.o(i.ceESP8266_checkCanConnectSsidIsExist) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[da]">ceESP8266_connectServer</a> from ceesp8266.o(i.ceESP8266_connectServer) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[d7]">ceESP8266_connectWifi</a> from ceesp8266.o(i.ceESP8266_connectWifi) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[d9]">ceESP8266_createServer</a> from ceesp8266.o(i.ceESP8266_createServer) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[d1]">ceESP8266_createWifi</a> from ceesp8266.o(i.ceESP8266_createWifi) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[d5]">ceESP8266_getCanConnectWifiCount</a> from ceesp8266.o(i.ceESP8266_getCanConnectWifiCount) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[d4]">ceESP8266_getCanConnectWifiList</a> from ceesp8266.o(i.ceESP8266_getCanConnectWifiList) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[d3]">ceESP8266_getConnectedDeviceCount</a> from ceesp8266.o(i.ceESP8266_getConnectedDeviceCount) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[d2]">ceESP8266_getConnectedDeviceList</a> from ceesp8266.o(i.ceESP8266_getConnectedDeviceList) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[de]">ceESP8266_getLinkCount</a> from ceesp8266.o(i.ceESP8266_getLinkCount) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[dd]">ceESP8266_getLinkList</a> from ceesp8266.o(i.ceESP8266_getLinkList) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[cf]">ceESP8266_initial</a> from ceesp8266.o(i.ceESP8266_initial) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[df]">ceESP8266_sendData</a> from ceesp8266.o(i.ceESP8266_sendData) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[d8]">ceESP8266_setStaIp</a> from ceesp8266.o(i.ceESP8266_setStaIp) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[d0]">ceESP8266_setWorkMode</a> from ceesp8266.o(i.ceESP8266_setWorkMode) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[db]">ceESP8266_startUTSendOnClient</a> from ceesp8266.o(i.ceESP8266_startUTSendOnClient) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[dc]">ceESP8266_stopUTSendOnClient</a> from ceesp8266.o(i.ceESP8266_stopUTSendOnClient) referenced from ceesp8266.o(.constdata)
 <LI><a href="#[58]">ceESP8266_taskCallBack</a> from ceesp8266.o(i.ceESP8266_taskCallBack) referenced from ceesp8266.o(i.ceESP8266_initial)
 <LI><a href="#[a8]">ceFifo_clear</a> from ceextra.o(i.ceFifo_clear) referenced from ceextra.o(.constdata)
 <LI><a href="#[a4]">ceFifo_getCanReadSize</a> from ceextra.o(i.ceFifo_getCanReadSize) referenced from ceextra.o(.constdata)
 <LI><a href="#[a5]">ceFifo_getCanWriteSize</a> from ceextra.o(i.ceFifo_getCanWriteSize) referenced from ceextra.o(.constdata)
 <LI><a href="#[a9]">ceFifo_getWriteLockStatus</a> from ceextra.o(i.ceFifo_getWriteLockStatus) referenced from ceextra.o(.constdata)
 <LI><a href="#[a2]">ceFifo_initial</a> from ceextra.o(i.ceFifo_initial) referenced from ceextra.o(.constdata)
 <LI><a href="#[a3]">ceFifo_isEmpty</a> from ceextra.o(i.ceFifo_isEmpty) referenced from ceextra.o(.constdata)
 <LI><a href="#[a7]">ceFifo_read</a> from ceextra.o(i.ceFifo_read) referenced from ceextra.o(.constdata)
 <LI><a href="#[a6]">ceFifo_write</a> from ceextra.o(i.ceFifo_write) referenced from ceextra.o(.constdata)
 <LI><a href="#[d]">ceFilterBase_filter</a> from cefilter.o(i.ceFilterBase_filter) referenced 2 times from cefilter.o(.data)
 <LI><a href="#[c]">ceFilterBase_initial</a> from cefilter.o(i.ceFilterBase_initial) referenced 2 times from cefilter.o(.data)
 <LI><a href="#[f9]">ceFilterErjie_filter</a> from cefilter.o(i.ceFilterErjie_filter) referenced from cefilter.o(.constdata)
 <LI><a href="#[f8]">ceFilterErjie_initial</a> from cefilter.o(i.ceFilterErjie_initial) referenced from cefilter.o(.constdata)
 <LI><a href="#[fb]">ceFilterIMU_filter</a> from cefilter.o(i.ceFilterIMU_filter) referenced from cefilter.o(.constdata)
 <LI><a href="#[fa]">ceFilterIMU_initial</a> from cefilter.o(i.ceFilterIMU_initial) referenced from cefilter.o(.constdata)
 <LI><a href="#[fd]">ceFilterKalman_filter</a> from cefilter.o(i.ceFilterKalman_filter) referenced from cefilter.o(.constdata)
 <LI><a href="#[fc]">ceFilterKalman_initial</a> from cefilter.o(i.ceFilterKalman_initial) referenced from cefilter.o(.constdata)
 <LI><a href="#[f5]">ceFilterSlider_filter</a> from cefilter.o(i.ceFilterSlider_filter) referenced from cefilter.o(.constdata)
 <LI><a href="#[f4]">ceFilterSlider_initial</a> from cefilter.o(i.ceFilterSlider_initial) referenced from cefilter.o(.constdata)
 <LI><a href="#[f6]">ceFilterYijie_Yinitial</a> from cefilter.o(i.ceFilterYijie_Yinitial) referenced from cefilter.o(.constdata)
 <LI><a href="#[f7]">ceFilterYijie_filter</a> from cefilter.o(i.ceFilterYijie_filter) referenced from cefilter.o(.constdata)
 <LI><a href="#[ff]">ceFilter_filter</a> from cefilter.o(i.ceFilter_filter) referenced from cefilter.o(.constdata)
 <LI><a href="#[fe]">ceFilter_initial</a> from cefilter.o(i.ceFilter_initial) referenced from cefilter.o(.constdata)
 <LI><a href="#[64]">ceGpio_getBit</a> from cegpio.o(i.ceGpio_getBit) referenced from cegpio.o(.constdata)
 <LI><a href="#[61]">ceGpio_initial</a> from cegpio.o(i.ceGpio_initial) referenced from cegpio.o(.constdata)
 <LI><a href="#[63]">ceGpio_resetBit</a> from cegpio.o(i.ceGpio_resetBit) referenced from cegpio.o(.constdata)
 <LI><a href="#[62]">ceGpio_setBit</a> from cegpio.o(i.ceGpio_setBit) referenced from cegpio.o(.constdata)
 <LI><a href="#[65]">ceGpio_setMode</a> from cegpio.o(i.ceGpio_setMode) referenced from cegpio.o(.constdata)
 <LI><a href="#[66]">ceI2cMaster_initial</a> from cei2c.o(i.ceI2cMaster_initial) referenced from cei2c.o(.constdata)
 <LI><a href="#[6c]">ceI2cMaster_lockBus</a> from cei2c.o(i.ceI2cMaster_lockBus) referenced from cei2c.o(.constdata)
 <LI><a href="#[6a]">ceI2cMaster_recvByte</a> from cei2c.o(i.ceI2cMaster_recvByte) referenced from cei2c.o(.constdata)
 <LI><a href="#[69]">ceI2cMaster_sendByte</a> from cei2c.o(i.ceI2cMaster_sendByte) referenced from cei2c.o(.constdata)
 <LI><a href="#[67]">ceI2cMaster_start</a> from cei2c.o(i.ceI2cMaster_start) referenced from cei2c.o(.constdata)
 <LI><a href="#[68]">ceI2cMaster_stop</a> from cei2c.o(i.ceI2cMaster_stop) referenced from cei2c.o(.constdata)
 <LI><a href="#[6d]">ceI2cMaster_unlockBus</a> from cei2c.o(i.ceI2cMaster_unlockBus) referenced from cei2c.o(.constdata)
 <LI><a href="#[6b]">ceI2cMaster_waitAck</a> from cei2c.o(i.ceI2cMaster_waitAck) referenced from cei2c.o(.constdata)
 <LI><a href="#[72]">ceInt_getBit</a> from ceint.o(i.ceInt_getBit) referenced from ceint.o(.constdata)
 <LI><a href="#[6e]">ceInt_initial</a> from ceint.o(i.ceInt_initial) referenced from ceint.o(.constdata)
 <LI><a href="#[6f]">ceInt_setMode</a> from ceint.o(i.ceInt_setMode) referenced from ceint.o(.constdata)
 <LI><a href="#[70]">ceInt_start</a> from ceint.o(i.ceInt_start) referenced from ceint.o(.constdata)
 <LI><a href="#[71]">ceInt_stop</a> from ceint.o(i.ceInt_stop) referenced from ceint.o(.constdata)
 <LI><a href="#[a0]">ceItoa</a> from ceextra.o(i.ceItoa) referenced from ceextra.o(.constdata)
 <LI><a href="#[59]">ceLed1C_TickCallBack</a> from celed1c.o(i.ceLed1C_TickCallBack) referenced from celed1c.o(i.ceLed1C_initialByGpio)
 <LI><a href="#[59]">ceLed1C_TickCallBack</a> from celed1c.o(i.ceLed1C_TickCallBack) referenced from celed1c.o(i.ceLed1C_initialByPwm)
 <LI><a href="#[c7]">ceLed1C_initialByGpio</a> from celed1c.o(i.ceLed1C_initialByGpio) referenced from celed1c.o(.constdata)
 <LI><a href="#[c8]">ceLed1C_initialByPwm</a> from celed1c.o(i.ceLed1C_initialByPwm) referenced from celed1c.o(.constdata)
 <LI><a href="#[cc]">ceLed1C_setBreath</a> from celed1c.o(i.ceLed1C_setBreath) referenced from celed1c.o(.constdata)
 <LI><a href="#[cb]">ceLed1C_setFlash</a> from celed1c.o(i.ceLed1C_setFlash) referenced from celed1c.o(.constdata)
 <LI><a href="#[ca]">ceLed1C_setOff</a> from celed1c.o(i.ceLed1C_setOff) referenced from celed1c.o(.constdata)
 <LI><a href="#[c9]">ceLed1C_setOn</a> from celed1c.o(i.ceLed1C_setOn) referenced from celed1c.o(.constdata)
 <LI><a href="#[100]">ceMDCtl_initial</a> from cemdctl.o(i.ceMDCtl_initial) referenced from cemdctl.o(.constdata)
 <LI><a href="#[101]">ceMDCtl_setDriverPower</a> from cemdctl.o(i.ceMDCtl_setDriverPower) referenced from cemdctl.o(.constdata)
 <LI><a href="#[e6]">ceMD_initial</a> from cemd.o(i.ceMD_initial) referenced from cemd.o(.constdata)
 <LI><a href="#[e7]">ceMD_setDriverPower</a> from cemd.o(i.ceMD_setDriverPower) referenced from cemd.o(.constdata)
 <LI><a href="#[e1]">ceMPU6050_getAcceleration</a> from cempu6050.o(i.ceMPU6050_getAcceleration) referenced from cempu6050.o(.constdata)
 <LI><a href="#[e2]">ceMPU6050_getGyroscope</a> from cempu6050.o(i.ceMPU6050_getGyroscope) referenced from cempu6050.o(.constdata)
 <LI><a href="#[e0]">ceMPU6050_initial</a> from cempu6050.o(i.ceMPU6050_initial) referenced from cempu6050.o(.constdata)
 <LI><a href="#[e3]">ceNRF24L01P_initial</a> from cenrf24l01p.o(i.ceNRF24L01P_initial) referenced from cenrf24l01p.o(.constdata)
 <LI><a href="#[5a]">ceNRF24L01P_intCallBack</a> from cenrf24l01p.o(i.ceNRF24L01P_intCallBack) referenced from cenrf24l01p.o(i.ceNRF24L01P_initial)
 <LI><a href="#[e5]">ceNRF24L01P_recv</a> from cenrf24l01p.o(i.ceNRF24L01P_recv) referenced from cenrf24l01p.o(.constdata)
 <LI><a href="#[e4]">ceNRF24L01P_send</a> from cenrf24l01p.o(i.ceNRF24L01P_send) referenced from cenrf24l01p.o(.constdata)
 <LI><a href="#[ce]">cePC33V_getVoltage</a> from cepc33v.o(i.cePC33V_getVoltage) referenced from cepc33v.o(.constdata)
 <LI><a href="#[cd]">cePC33V_initial</a> from cepc33v.o(i.cePC33V_initial) referenced from cepc33v.o(.constdata)
 <LI><a href="#[f0]">cePID_calculate</a> from cepid.o(i.cePID_calculate) referenced from cepid.o(.constdata)
 <LI><a href="#[ef]">cePID_initial</a> from cepid.o(i.cePID_initial) referenced from cepid.o(.constdata)
 <LI><a href="#[f3]">cePackage_dealRecv</a> from cepackage.o(i.cePackage_dealRecv) referenced from cepackage.o(.constdata)
 <LI><a href="#[f2]">cePackage_dealSend</a> from cepackage.o(i.cePackage_dealSend) referenced from cepackage.o(.constdata)
 <LI><a href="#[f1]">cePackage_initial</a> from cepackage.o(i.cePackage_initial) referenced from cepackage.o(.constdata)
 <LI><a href="#[114]">ceParCtl_afterFilterHook</a> from ceparctl.o(i.ceParCtl_afterFilterHook) referenced from ceparctl.o(.constdata)
 <LI><a href="#[116]">ceParCtl_afterPIDHook</a> from ceparctl.o(i.ceParCtl_afterPIDHook) referenced from ceparctl.o(.constdata)
 <LI><a href="#[113]">ceParCtl_beforeFilterHook</a> from ceparctl.o(i.ceParCtl_beforeFilterHook) referenced from ceparctl.o(.constdata)
 <LI><a href="#[115]">ceParCtl_beforePIDHook</a> from ceparctl.o(i.ceParCtl_beforePIDHook) referenced from ceparctl.o(.constdata)
 <LI><a href="#[112]">ceParCtl_initial</a> from ceparctl.o(i.ceParCtl_initial) referenced from ceparctl.o(.constdata)
 <LI><a href="#[5b]">ceParCtl_recvDataCallBack</a> from ceparctl.o(i.ceParCtl_recvDataCallBack) referenced from ceparctl.o(i.ceParCtl_initial)
 <LI><a href="#[117]">ceParCtl_recvDataHook</a> from ceparctl.o(i.ceParCtl_recvDataHook) referenced from ceparctl.o(.constdata)
 <LI><a href="#[118]">ceParCtl_sendDataHook</a> from ceparctl.o(i.ceParCtl_sendDataHook) referenced from ceparctl.o(.constdata)
 <LI><a href="#[73]">cePwm_initial</a> from cepwm.o(i.cePwm_initial) referenced from cepwm.o(.constdata)
 <LI><a href="#[78]">cePwm_resetBit</a> from cepwm.o(i.cePwm_resetBit) referenced from cepwm.o(.constdata)
 <LI><a href="#[77]">cePwm_setBit</a> from cepwm.o(i.cePwm_setBit) referenced from cepwm.o(.constdata)
 <LI><a href="#[74]">cePwm_start</a> from cepwm.o(i.cePwm_start) referenced from cepwm.o(.constdata)
 <LI><a href="#[76]">cePwm_stop</a> from cepwm.o(i.cePwm_stop) referenced from cepwm.o(.constdata)
 <LI><a href="#[75]">cePwm_updata</a> from cepwm.o(i.cePwm_updata) referenced from cepwm.o(.constdata)
 <LI><a href="#[e9]">ceSensor_getAcc</a> from cesensor.o(i.ceSensor_getAcc) referenced from cesensor.o(.constdata)
 <LI><a href="#[ec]">ceSensor_getAlt</a> from cesensor.o(i.ceSensor_getAlt) referenced from cesensor.o(.constdata)
 <LI><a href="#[ed]">ceSensor_getGps</a> from cesensor.o(i.ceSensor_getGps) referenced from cesensor.o(.constdata)
 <LI><a href="#[ea]">ceSensor_getGyr</a> from cesensor.o(i.ceSensor_getGyr) referenced from cesensor.o(.constdata)
 <LI><a href="#[eb]">ceSensor_getMag</a> from cesensor.o(i.ceSensor_getMag) referenced from cesensor.o(.constdata)
 <LI><a href="#[ee]">ceSensor_getTem</a> from cesensor.o(i.ceSensor_getTem) referenced from cesensor.o(.constdata)
 <LI><a href="#[e8]">ceSensor_initial</a> from cesensor.o(i.ceSensor_initial) referenced from cesensor.o(.constdata)
 <LI><a href="#[7c]">ceSpiMasterByte_writeRead</a> from cespi.o(i.ceSpiMasterByte_writeRead) referenced from cespi.o(.constdata)
 <LI><a href="#[79]">ceSpiMaster_initial</a> from cespi.o(i.ceSpiMaster_initial) referenced from cespi.o(.constdata)
 <LI><a href="#[7f]">ceSpiMaster_lockBus</a> from cespi.o(i.ceSpiMaster_lockBus) referenced from cespi.o(.constdata)
 <LI><a href="#[7e]">ceSpiMaster_resetNSSBit</a> from cespi.o(i.ceSpiMaster_resetNSSBit) referenced from cespi.o(.constdata)
 <LI><a href="#[7d]">ceSpiMaster_setNSSBit</a> from cespi.o(i.ceSpiMaster_setNSSBit) referenced from cespi.o(.constdata)
 <LI><a href="#[7a]">ceSpiMaster_start</a> from cespi.o(i.ceSpiMaster_start) referenced from cespi.o(.constdata)
 <LI><a href="#[7b]">ceSpiMaster_stop</a> from cespi.o(i.ceSpiMaster_stop) referenced from cespi.o(.constdata)
 <LI><a href="#[80]">ceSpiMaster_unlockBus</a> from cespi.o(i.ceSpiMaster_unlockBus) referenced from cespi.o(.constdata)
 <LI><a href="#[111]">ceStatus_getHopeStatus</a> from cestatus.o(i.ceStatus_getHopeStatus) referenced from cestatus.o(.constdata)
 <LI><a href="#[110]">ceStatus_getNowStatus</a> from cestatus.o(i.ceStatus_getNowStatus) referenced from cestatus.o(.constdata)
 <LI><a href="#[10f]">ceStatus_initial</a> from cestatus.o(i.ceStatus_initial) referenced from cestatus.o(.constdata)
 <LI><a href="#[9e]">ceStrcmp</a> from ceextra.o(i.ceStrcmp) referenced from ceextra.o(.constdata)
 <LI><a href="#[9f]">ceStrcpy</a> from ceextra.o(i.ceStrcpy) referenced from ceextra.o(.constdata)
 <LI><a href="#[9d]">ceStrlen</a> from ceextra.o(i.ceStrlen) referenced from ceextra.o(.constdata)
 <LI><a href="#[5c]">ceSysCtl_callBack</a> from cesysctl.o(i.ceSysCtl_callBack) referenced from cesysctl.o(i.ceSysCtl_initial)
 <LI><a href="#[10c]">ceSysCtl_checkConnectStatus</a> from cesysctl.o(i.ceSysCtl_checkConnectStatus) referenced from cesysctl.o(.constdata)
 <LI><a href="#[108]">ceSysCtl_getBatVol</a> from cesysctl.o(i.ceSysCtl_getBatVol) referenced from cesysctl.o(.constdata)
 <LI><a href="#[10a]">ceSysCtl_getBtnSta</a> from cesysctl.o(i.ceSysCtl_getBtnSta) referenced from cesysctl.o(.constdata)
 <LI><a href="#[10e]">ceSysCtl_getMode</a> from cesysctl.o(i.ceSysCtl_getMode) referenced from cesysctl.o(.constdata)
 <LI><a href="#[10b]">ceSysCtl_getSysRunCycle</a> from cesysctl.o(i.ceSysCtl_getSysRunCycle) referenced from cesysctl.o(.constdata)
 <LI><a href="#[107]">ceSysCtl_initial</a> from cesysctl.o(i.ceSysCtl_initial) referenced from cesysctl.o(.constdata)
 <LI><a href="#[109]">ceSysCtl_setAlarm</a> from cesysctl.o(i.ceSysCtl_setAlarm) referenced from cesysctl.o(.constdata)
 <LI><a href="#[10d]">ceSysCtl_setMode</a> from cesysctl.o(i.ceSysCtl_setMode) referenced from cesysctl.o(.constdata)
 <LI><a href="#[5d]">ceSystem_callBackTickTimer</a> from cesystem.o(i.ceSystem_callBackTickTimer) referenced from cesystem.o(i.ceSystem_initialTickTimer)
 <LI><a href="#[84]">ceSystem_delayMs</a> from cesystem.o(i.ceSystem_delayMs) referenced from cesystem.o(.constdata)
 <LI><a href="#[82]">ceSystem_delayNs</a> from cesystem.o(i.ceSystem_delayNs) referenced from cesystem.o(.constdata)
 <LI><a href="#[83]">ceSystem_delayUs</a> from cesystem.o(i.ceSystem_delayUs) referenced from cesystem.o(.constdata)
 <LI><a href="#[87]">ceSystem_getErrorMsg</a> from cesystem.o(i.ceSystem_getErrorMsg) referenced from cesystem.o(.constdata)
 <LI><a href="#[86]">ceSystem_getSystemTickMs</a> from cesystem.o(i.ceSystem_getSystemTickMs) referenced from cesystem.o(.constdata)
 <LI><a href="#[85]">ceSystem_getSystemTickUs</a> from cesystem.o(i.ceSystem_getSystemTickUs) referenced from cesystem.o(.constdata)
 <LI><a href="#[81]">ceSystem_initial</a> from cesystem.o(i.ceSystem_initial) referenced from cesystem.o(.constdata)
 <LI><a href="#[105]">ceTMCtl_checkConnectStatus</a> from cetmctl.o(i.ceTMCtl_checkConnectStatus) referenced from cetmctl.o(.constdata)
 <LI><a href="#[106]">ceTMCtl_getSendIntervalMs</a> from cetmctl.o(i.ceTMCtl_getSendIntervalMs) referenced from cetmctl.o(.constdata)
 <LI><a href="#[102]">ceTMCtl_initial</a> from cetmctl.o(i.ceTMCtl_initial) referenced from cetmctl.o(.constdata)
 <LI><a href="#[5e]">ceTMCtl_recvCallBack</a> from cetmctl.o(i.ceTMCtl_recvCallBack) referenced from cetmctl.o(i.ceTMCtl_initial)
 <LI><a href="#[5e]">ceTMCtl_recvCallBack</a> from cetmctl.o(i.ceTMCtl_recvCallBack) referenced from cetmctl.o(i.ceTMCtl_sendData)
 <LI><a href="#[104]">ceTMCtl_sendData</a> from cetmctl.o(i.ceTMCtl_sendData) referenced from cetmctl.o(.constdata)
 <LI><a href="#[b8]">ceTask_getCriticalStatus</a> from cetask.o(i.ceTask_getCriticalStatus) referenced from cetask.o(.constdata)
 <LI><a href="#[b6]">ceTask_inCriticalSection</a> from cetask.o(i.ceTask_inCriticalSection) referenced from cetask.o(.constdata)
 <LI><a href="#[b1]">ceTask_mainTask</a> from cetask.o(i.ceTask_mainTask) referenced from cetask.o(.constdata)
 <LI><a href="#[b7]">ceTask_outCriticalSection</a> from cetask.o(i.ceTask_outCriticalSection) referenced from cetask.o(.constdata)
 <LI><a href="#[b2]">ceTask_register</a> from cetask.o(i.ceTask_register) referenced from cetask.o(.constdata)
 <LI><a href="#[b3]">ceTask_start</a> from cetask.o(i.ceTask_start) referenced from cetask.o(.constdata)
 <LI><a href="#[b4]">ceTask_stop</a> from cetask.o(i.ceTask_stop) referenced from cetask.o(.constdata)
 <LI><a href="#[b9]">ceTask_taskSchedule</a> from cetask.o(i.ceTask_taskSchedule) referenced from cetask.o(.constdata)
 <LI><a href="#[b5]">ceTask_unRegister</a> from cetask.o(i.ceTask_unRegister) referenced from cetask.o(.constdata)
 <LI><a href="#[be]">ceTicker_callBySystem</a> from ceticker.o(i.ceTicker_callBySystem) referenced from ceticker.o(.constdata)
 <LI><a href="#[ba]">ceTicker_register</a> from ceticker.o(i.ceTicker_register) referenced from ceticker.o(.constdata)
 <LI><a href="#[bb]">ceTicker_start</a> from ceticker.o(i.ceTicker_start) referenced from ceticker.o(.constdata)
 <LI><a href="#[bd]">ceTicker_unRegister</a> from ceticker.o(i.ceTicker_unRegister) referenced from ceticker.o(.constdata)
 <LI><a href="#[8c]">ceTimer_getTimerMaxCnt</a> from cetimer.o(i.ceTimer_getTimerMaxCnt) referenced from cetimer.o(.constdata)
 <LI><a href="#[8d]">ceTimer_getTimreNowCnt</a> from cetimer.o(i.ceTimer_getTimreNowCnt) referenced from cetimer.o(.constdata)
 <LI><a href="#[88]">ceTimer_initial</a> from cetimer.o(i.ceTimer_initial) referenced from cetimer.o(.constdata)
 <LI><a href="#[89]">ceTimer_start</a> from cetimer.o(i.ceTimer_start) referenced from cetimer.o(.constdata)
 <LI><a href="#[8b]">ceTimer_stop</a> from cetimer.o(i.ceTimer_stop) referenced from cetimer.o(.constdata)
 <LI><a href="#[8a]">ceTimer_upData</a> from cetimer.o(i.ceTimer_upData) referenced from cetimer.o(.constdata)
 <LI><a href="#[94]">ceUart_clearRecvBuf</a> from ceuart.o(i.ceUart_clearRecvBuf) referenced from ceuart.o(.constdata)
 <LI><a href="#[91]">ceUart_getRecvDataCount</a> from ceuart.o(i.ceUart_getRecvDataCount) referenced from ceuart.o(.constdata)
 <LI><a href="#[8e]">ceUart_initial</a> from ceuart.o(i.ceUart_initial) referenced from ceuart.o(.constdata)
 <LI><a href="#[92]">ceUart_readData</a> from ceuart.o(i.ceUart_readData) referenced from ceuart.o(.constdata)
 <LI><a href="#[90]">ceUart_sendData</a> from ceuart.o(i.ceUart_sendData) referenced from ceuart.o(.constdata)
 <LI><a href="#[8f]">ceUart_start</a> from ceuart.o(i.ceUart_start) referenced from ceuart.o(.constdata)
 <LI><a href="#[93]">ceUart_stop</a> from ceuart.o(i.ceUart_stop) referenced from ceuart.o(.constdata)
 <LI><a href="#[103]">setRecvCallBack</a> from cetmctl.o(i.setRecvCallBack) referenced from cetmctl.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[119]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[11c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ea]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1eb]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ec]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1ed]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1ee]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[120]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1fe]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[200]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[201]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[202]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[203]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[204]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[205]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[206]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[207]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[208]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[209]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[11b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[20a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[11d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[20b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[121]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[20c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[12d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[124]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[20d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[126]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCalTimerPrescalerAndPeriod
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_getSystemTickUs
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_getSystemTickMs
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_delayUs
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_delayMs
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCalPwmPrescalerAndPeriod
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMD_setDriverPower
</UL>

<P><STRONG><a name="[20e]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceItoa
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[12a]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[215]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[218]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[123]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[127]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[219]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_getConvertValue
</UL>

<P><STRONG><a name="[21b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_initial
</UL>

<P><STRONG><a name="[16c]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_initial
</UL>

<P><STRONG><a name="[162]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_getConvertValue
</UL>

<P><STRONG><a name="[161]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_getConvertValue
</UL>

<P><STRONG><a name="[16a]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_initial
</UL>

<P><STRONG><a name="[167]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_initial
</UL>

<P><STRONG><a name="[15e]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_getConvertValue
</UL>

<P><STRONG><a name="[169]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_initial
</UL>

<P><STRONG><a name="[160]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_getConvertValue
</UL>

<P><STRONG><a name="[16b]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_initial
</UL>

<P><STRONG><a name="[134]"></a>DAC_Cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_dac.o(i.DAC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>DAC_DMACmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dac.o(i.DAC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[23]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cead.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ceuart.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ceuart.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ceuart.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ceda.o(i.DMA2_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMACmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ceda.o(i.DMA2_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel4_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMACmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_sendData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[1c4]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
</UL>

<P><STRONG><a name="[142]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>DMA_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[1c5]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
</UL>

<P><STRONG><a name="[1e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ceint.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, ceint.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ceint.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ceint.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ceint.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ceint.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, ceint.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[136]"></a>EXTI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_stop
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_start
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GenerateSWInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
</UL>

<P><STRONG><a name="[135]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
</UL>

<P><STRONG><a name="[191]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
</UL>

<P><STRONG><a name="[165]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_initial
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_stop
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_setBit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_resetBit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSetI2cMasterSDAMode
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_initial
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceGpio_setMode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_initial
</UL>

<P><STRONG><a name="[1b5]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_initial
</UL>

<P><STRONG><a name="[18a]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_getBit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_waitAck
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_recvByte
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceGpio_getBit
</UL>

<P><STRONG><a name="[1ad]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_resetNSSBit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_initial
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_resetBit
</UL>

<P><STRONG><a name="[1ae]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_setNSSBit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_initial
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_setBit
</UL>

<P><STRONG><a name="[193]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_stop
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_start
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
</UL>

<P><STRONG><a name="[1bc]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_GolbalInterruptInitial
</UL>

<P><STRONG><a name="[1bb]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_GolbalInterruptInitial
</UL>

<P><STRONG><a name="[166]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_initial
</UL>

<P><STRONG><a name="[1c3]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
</UL>

<P><STRONG><a name="[1ab]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_initial
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_initial
</UL>

<P><STRONG><a name="[13d]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[164]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_initial
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_initial
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_initial
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceGpio_initial
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_initial
</UL>

<P><STRONG><a name="[13c]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[144]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1b7]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_start
</UL>

<P><STRONG><a name="[1b2]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMasterByte_writeRead
</UL>

<P><STRONG><a name="[1b4]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMasterByte_writeRead
</UL>

<P><STRONG><a name="[1b3]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMasterByte_writeRead
</UL>

<P><STRONG><a name="[1b6]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_initial
</UL>

<P><STRONG><a name="[54]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cetimer.o(i.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_UP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM2_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ceccp.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM3_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cetimer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM4_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cetimer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cetimer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM6_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cetimer.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cetimer.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cetimer.o(i.TIM8_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM8_UP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b0]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_start
</UL>

<P><STRONG><a name="[13a]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_upData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_stop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_start
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_upData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_stop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_stop
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_start
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[1af]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_start
</UL>

<P><STRONG><a name="[13b]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_initial
</UL>

<P><STRONG><a name="[139]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1c1]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_upData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_stop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_start
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
</UL>

<P><STRONG><a name="[4]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepwm.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR>[Address Reference Count : 1]<UL><LI> cepwm.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepwm.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC2PreloadConfig))
<BR>[Address Reference Count : 1]<UL><LI> cepwm.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepwm.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC3PreloadConfig))
<BR>[Address Reference Count : 1]<UL><LI> cepwm.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>TIM_OC4Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepwm.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC4PreloadConfig))
<BR>[Address Reference Count : 1]<UL><LI> cepwm.o(.data)
</UL>
<P><STRONG><a name="[1c0]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_upData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_start
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
</UL>

<P><STRONG><a name="[1ac]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_initial
</UL>

<P><STRONG><a name="[4c]"></a>UART4_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, ceuart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART4_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART5_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, ceuart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART5_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART1_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ceuart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART2_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ceuart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART3_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ceuart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c8]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_start
</UL>

<P><STRONG><a name="[1c6]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
</UL>

<P><STRONG><a name="[1c7]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_sendData
</UL>

<P><STRONG><a name="[13e]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_sendData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
</UL>

<P><STRONG><a name="[141]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[145]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[14e]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[14f]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[150]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[153]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[154]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[155]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[152]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[157]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterIMU_filter
</UL>

<P><STRONG><a name="[159]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilter_filter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[15a]"></a>atan2</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterIMU_filter
</UL>

<P><STRONG><a name="[bc]"></a>cTicker_stop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ceticker.o(i.cTicker_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cTicker_stop &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeTicker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceticker.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>ceAbs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ceextra.o(i.ceAbs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceAbs &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>ceAd_getConvertValue</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, cead.o(i.ceAd_getConvertValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ceAd_getConvertValue &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cead.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>ceAd_initial</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, cead.o(i.ceAd_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceAd_initial &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeAd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cead.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>ceAtoi</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ceextra.o(i.ceAtoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceAtoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>ceBeepNSrc_initial</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cebeepnsrc.o(i.ceBeepNSrc_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceBeepNSrc_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cebeepnsrc.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>ceBeepNSrc_initialByPwm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cebeepnsrc.o(i.ceBeepNSrc_initialByPwm))
<BR>[Address Reference Count : 1]<UL><LI> cebeepnsrc.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>ceBeepNSrc_say</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, cebeepnsrc.o(i.ceBeepNSrc_say))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ceBeepNSrc_say
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cebeepnsrc.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>ceBtnx1_callBackInt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cebtnx1.o(i.ceBtnx1_callBackInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceBtnx1_callBackInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cebtnx1.o(i.ceBtnx1_initialByInt)
</UL>
<P><STRONG><a name="[56]"></a>ceBtnx1_callBackTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cebtnx1.o(i.ceBtnx1_callBackTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceBtnx1_callBackTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cebtnx1.o(i.ceBtnx1_initialByGpio)
</UL>
<P><STRONG><a name="[c4]"></a>ceBtnx1_getStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cebtnx1.o(i.ceBtnx1_getStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceBtnx1_getStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cebtnx1.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>ceBtnx1_initialByGpio</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, cebtnx1.o(i.ceBtnx1_initialByGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceBtnx1_initialByGpio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cebtnx1.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>ceBtnx1_initialByInt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cebtnx1.o(i.ceBtnx1_initialByInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceBtnx1_initialByInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cebtnx1.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>ceBtnx1_waitForPressDown</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, cebtnx1.o(i.ceBtnx1_waitForPressDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceBtnx1_waitForPressDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cebtnx1.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>ceBtnx1_waitForPressUp</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, cebtnx1.o(i.ceBtnx1_waitForPressUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceBtnx1_waitForPressUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cebtnx1.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>ceCalPwmPrescalerAndPeriod</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, cepwm.o(i.ceCalPwmPrescalerAndPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ceCalPwmPrescalerAndPeriod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_updata
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_initial
</UL>

<P><STRONG><a name="[16f]"></a>ceCalTimerPrescalerAndPeriod</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, cetimer.o(i.ceCalTimerPrescalerAndPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ceCalTimerPrescalerAndPeriod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_upData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
</UL>

<P><STRONG><a name="[163]"></a>ceCheckCeAd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cead.o(i.ceCheckCeAd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_initial
</UL>

<P><STRONG><a name="[18b]"></a>ceCheckCeGpio</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cegpio.o(i.ceCheckCeGpio))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceGpio_setMode
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceGpio_initial
</UL>

<P><STRONG><a name="[18f]"></a>ceCheckCeI2cMaster</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cei2c.o(i.ceCheckCeI2cMaster))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_waitAck
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_stop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_sendByte
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_recvByte
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_initial
</UL>

<P><STRONG><a name="[190]"></a>ceCheckCeInt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ceint.o(i.ceCheckCeInt))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_stop
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_setMode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_getBit
</UL>

<P><STRONG><a name="[1aa]"></a>ceCheckCePwm</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, cepwm.o(i.ceCheckCePwm))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_updata
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_stop
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_setBit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_resetBit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_initial
</UL>

<P><STRONG><a name="[1be]"></a>ceCheckCeTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cetask.o(i.ceCheckCeTask))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTask_register
</UL>

<P><STRONG><a name="[15b]"></a>ceCheckCeTicker</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ceticker.o(i.ceCheckCeTicker))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTicker_unRegister
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTicker_start
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTicker_register
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTicker_stop
</UL>

<P><STRONG><a name="[1bf]"></a>ceCheckCeTimer</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cetimer.o(i.ceCheckCeTimer))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_upData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
</UL>

<P><STRONG><a name="[1c2]"></a>ceCheckCeUart</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ceuart.o(i.ceCheckCeUart))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_sendData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
</UL>

<P><STRONG><a name="[1b1]"></a>ceCheckSpiMaster</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cespi.o(i.ceCheckSpiMaster))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_start
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_setNSSBit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_resetNSSBit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_initial
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMasterByte_writeRead
</UL>

<P><STRONG><a name="[9b]"></a>ceDebug_getRecvData</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cedebug.o(i.ceDebug_getRecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceDebug_getRecvData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cedebug.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>ceDebug_getRecvDataCount</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cedebug.o(i.ceDebug_getRecvDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceDebug_getRecvDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cedebug.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>ceDebug_initial</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, cedebug.o(i.ceDebug_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceDebug_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cedebug.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>ceDebug_printf</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, cedebug.o(i.ceDebug_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ceDebug_printf &rArr; ceDebug_printfFp64 &rArr; ceDebug_printfUint32 &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfUint32
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfStr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfInt32
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfHex
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfBin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cedebug.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>ceDebug_printfBin</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cedebug.o(i.ceDebug_printfBin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceDebug_printfBin &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_sprintf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printf
</UL>

<P><STRONG><a name="[170]"></a>ceDebug_printfChar</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cedebug.o(i.ceDebug_printfChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceDebug_printfChar
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_sprintf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfUint32
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfStr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfInt32
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfHex
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfBin
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printf
</UL>

<P><STRONG><a name="[173]"></a>ceDebug_printfFp64</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, cedebug.o(i.ceDebug_printfFp64))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ceDebug_printfFp64 &rArr; ceDebug_printfUint32 &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfUint32
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_sprintf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printf
</UL>

<P><STRONG><a name="[176]"></a>ceDebug_printfHex</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cedebug.o(i.ceDebug_printfHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceDebug_printfHex &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_sprintf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printf
</UL>

<P><STRONG><a name="[171]"></a>ceDebug_printfInt32</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, cedebug.o(i.ceDebug_printfInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceDebug_printfInt32 &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_sprintf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printf
</UL>

<P><STRONG><a name="[174]"></a>ceDebug_printfStr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cedebug.o(i.ceDebug_printfStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceDebug_printfStr &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_sprintf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printf
</UL>

<P><STRONG><a name="[172]"></a>ceDebug_printfUint32</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, cedebug.o(i.ceDebug_printfUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceDebug_printfUint32 &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_sprintf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printf
</UL>

<P><STRONG><a name="[96]"></a>ceDebug_registerAppendString</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, cedebug.o(i.ceDebug_registerAppendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceDebug_registerAppendString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cedebug.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>ceDebug_sprintf</STRONG> (Thumb, 410 bytes, Stack size 64 bytes, cedebug.o(i.ceDebug_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ceDebug_sprintf &rArr; ceDebug_printfFp64 &rArr; ceDebug_printfUint32 &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfUint32
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfStr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfInt32
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfHex
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfBin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cedebug.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>ceDebug_unRegisterAppendString</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cedebug.o(i.ceDebug_unRegisterAppendString))
<BR>[Address Reference Count : 1]<UL><LI> cedebug.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>ceDoubleFifo_clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ceextra.o(i.ceDoubleFifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceDoubleFifo_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>ceDoubleFifo_getCanReadSize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ceextra.o(i.ceDoubleFifo_getCanReadSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ceDoubleFifo_getCanReadSize &rArr; ceDoubleFifo_updata
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_updata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>ceDoubleFifo_getCanWriteSize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ceextra.o(i.ceDoubleFifo_getCanWriteSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ceDoubleFifo_getCanWriteSize &rArr; ceDoubleFifo_updata
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_updata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>ceDoubleFifo_initial</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ceextra.o(i.ceDoubleFifo_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceDoubleFifo_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>ceDoubleFifo_isEmpty</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ceextra.o(i.ceDoubleFifo_isEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ceDoubleFifo_isEmpty &rArr; ceDoubleFifo_updata
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_updata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>ceDoubleFifo_read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ceextra.o(i.ceDoubleFifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceDoubleFifo_read &rArr; ceDoubleFifo_updata
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_updata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>ceDoubleFifo_updata</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ceextra.o(i.ceDoubleFifo_updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceDoubleFifo_updata
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_isEmpty
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_getCanWriteSize
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_getCanReadSize
</UL>

<P><STRONG><a name="[ae]"></a>ceDoubleFifo_write</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ceextra.o(i.ceDoubleFifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceDoubleFifo_write &rArr; ceDoubleFifo_updata
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_updata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>ceESP8266_atCIpSend</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, ceesp8266.o(i.ceESP8266_atCIpSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ceESP8266_atCIpSend &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendDataAndCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendData
</UL>

<P><STRONG><a name="[d6]"></a>ceESP8266_checkCanConnectSsidIsExist</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, ceesp8266.o(i.ceESP8266_checkCanConnectSsidIsExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ceESP8266_checkCanConnectSsidIsExist &rArr; ceESP8266_getCanConnectWifiList &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getCanConnectWifiList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>ceESP8266_connectServer</STRONG> (Thumb, 108 bytes, Stack size 96 bytes, ceesp8266.o(i.ceESP8266_connectServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ceESP8266_connectServer &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendDataAndCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>ceESP8266_connectWifi</STRONG> (Thumb, 124 bytes, Stack size 128 bytes, ceesp8266.o(i.ceESP8266_connectWifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ceESP8266_connectWifi &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendDataAndCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>ceESP8266_cpData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ceesp8266.o(i.ceESP8266_cpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceESP8266_cpData
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getLinkList
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getConnectedDeviceList
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getCanConnectWifiList
</UL>

<P><STRONG><a name="[d9]"></a>ceESP8266_createServer</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, ceesp8266.o(i.ceESP8266_createServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ceESP8266_createServer &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendDataAndCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>ceESP8266_createWifi</STRONG> (Thumb, 150 bytes, Stack size 176 bytes, ceesp8266.o(i.ceESP8266_createWifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ceESP8266_createWifi &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendDataAndCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>ceESP8266_getCanConnectWifiCount</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ceesp8266.o(i.ceESP8266_getCanConnectWifiCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ceESP8266_getCanConnectWifiCount &rArr; ceESP8266_getCanConnectWifiList &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getCanConnectWifiList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>ceESP8266_getCanConnectWifiList</STRONG> (Thumb, 636 bytes, Stack size 88 bytes, ceesp8266.o(i.ceESP8266_getCanConnectWifiList))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ceESP8266_getCanConnectWifiList &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendDataAndCheck
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_readStringByEndChar
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_cpData
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getCanConnectWifiCount
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_checkCanConnectSsidIsExist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>ceESP8266_getConnectedDeviceCount</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ceesp8266.o(i.ceESP8266_getConnectedDeviceCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ceESP8266_getConnectedDeviceCount &rArr; ceESP8266_getConnectedDeviceList &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getConnectedDeviceList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>ceESP8266_getConnectedDeviceList</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, ceesp8266.o(i.ceESP8266_getConnectedDeviceList))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ceESP8266_getConnectedDeviceList &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendDataAndCheck
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_readStringByEndChar
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_cpData
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getConnectedDeviceCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>ceESP8266_getLinkCount</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ceesp8266.o(i.ceESP8266_getLinkCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ceESP8266_getLinkCount &rArr; ceESP8266_getLinkList &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getLinkList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>ceESP8266_getLinkList</STRONG> (Thumb, 726 bytes, Stack size 64 bytes, ceesp8266.o(i.ceESP8266_getLinkList))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ceESP8266_getLinkList &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendDataAndCheck
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_readStringByEndChar
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_cpData
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getLinkCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>ceESP8266_initial</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ceesp8266.o(i.ceESP8266_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceESP8266_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>ceESP8266_readStringByEndChar</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ceesp8266.o(i.ceESP8266_readStringByEndChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceESP8266_readStringByEndChar
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_taskCallBack
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getLinkList
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getConnectedDeviceList
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getCanConnectWifiList
</UL>

<P><STRONG><a name="[df]"></a>ceESP8266_sendData</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ceesp8266.o(i.ceESP8266_sendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ceESP8266_sendData &rArr; ceESP8266_atCIpSend &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendUartData
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendDataAndCheck
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_atCIpSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>ceESP8266_sendDataAndCheck</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, ceesp8266.o(i.ceESP8266_sendDataAndCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceESP8266_sendDataAndCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_stopUTSendOnClient
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_startUTSendOnClient
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_setWorkMode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_setStaIp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getLinkList
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getConnectedDeviceList
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_getCanConnectWifiList
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_createWifi
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_createServer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_connectWifi
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_connectServer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_atCIpSend
</UL>

<P><STRONG><a name="[17d]"></a>ceESP8266_sendUartData</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ceesp8266.o(i.ceESP8266_sendUartData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceESP8266_sendUartData
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendData
</UL>

<P><STRONG><a name="[d8]"></a>ceESP8266_setStaIp</STRONG> (Thumb, 64 bytes, Stack size 88 bytes, ceesp8266.o(i.ceESP8266_setStaIp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ceESP8266_setStaIp &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendDataAndCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>ceESP8266_setWorkMode</STRONG> (Thumb, 250 bytes, Stack size 152 bytes, ceesp8266.o(i.ceESP8266_setWorkMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ceESP8266_setWorkMode &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendDataAndCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>ceESP8266_startUTSendOnClient</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ceesp8266.o(i.ceESP8266_startUTSendOnClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ceESP8266_startUTSendOnClient &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendDataAndCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>ceESP8266_stopUTSendOnClient</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ceesp8266.o(i.ceESP8266_stopUTSendOnClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ceESP8266_stopUTSendOnClient &rArr; ceESP8266_sendDataAndCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_sendDataAndCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>ceESP8266_taskCallBack</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, ceesp8266.o(i.ceESP8266_taskCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ceESP8266_taskCallBack &rArr; ceESP8266_readStringByEndChar
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceESP8266_readStringByEndChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceesp8266.o(i.ceESP8266_initial)
</UL>
<P><STRONG><a name="[a8]"></a>ceFifo_clear</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ceextra.o(i.ceFifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceFifo_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>ceFifo_getCanReadSize</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ceextra.o(i.ceFifo_getCanReadSize))
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>ceFifo_getCanWriteSize</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ceextra.o(i.ceFifo_getCanWriteSize))
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>ceFifo_getWriteLockStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ceextra.o(i.ceFifo_getWriteLockStatus))
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>ceFifo_initial</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ceextra.o(i.ceFifo_initial))
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>ceFifo_isEmpty</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ceextra.o(i.ceFifo_isEmpty))
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>ceFifo_read</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ceextra.o(i.ceFifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceFifo_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>ceFifo_write</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ceextra.o(i.ceFifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceFifo_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[d]"></a>ceFilterBase_filter</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, cefilter.o(i.ceFilterBase_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceFilterBase_filter &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cefilter.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>ceFilterBase_initial</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, cefilter.o(i.ceFilterBase_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ceFilterBase_initial &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cefilter.o(.data)
</UL>
<P><STRONG><a name="[f9]"></a>ceFilterErjie_filter</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, cefilter.o(i.ceFilterErjie_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ceFilterErjie_filter &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cefilter.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>ceFilterErjie_initial</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cefilter.o(i.ceFilterErjie_initial))
<BR>[Address Reference Count : 1]<UL><LI> cefilter.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>ceFilterIMU_filter</STRONG> (Thumb, 1406 bytes, Stack size 192 bytes, cefilter.o(i.ceFilterIMU_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ceFilterIMU_filter &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cefilter.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>ceFilterIMU_initial</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cefilter.o(i.ceFilterIMU_initial))
<BR>[Address Reference Count : 1]<UL><LI> cefilter.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>ceFilterKalman_filter</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, cefilter.o(i.ceFilterKalman_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceFilterKalman_filter &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cefilter.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>ceFilterKalman_initial</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, cefilter.o(i.ceFilterKalman_initial))
<BR>[Address Reference Count : 1]<UL><LI> cefilter.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>ceFilterSlider_filter</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cefilter.o(i.ceFilterSlider_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceFilterSlider_filter &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cefilter.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>ceFilterSlider_initial</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cefilter.o(i.ceFilterSlider_initial))
<BR>[Address Reference Count : 1]<UL><LI> cefilter.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>ceFilterYijie_Yinitial</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cefilter.o(i.ceFilterYijie_Yinitial))
<BR>[Address Reference Count : 1]<UL><LI> cefilter.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>ceFilterYijie_filter</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, cefilter.o(i.ceFilterYijie_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ceFilterYijie_filter &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cefilter.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>ceFilter_checkFilterType</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, cefilter.o(i.ceFilter_checkFilterType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceFilter_checkFilterType
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilter_filter
</UL>

<P><STRONG><a name="[ff]"></a>ceFilter_filter</STRONG> (Thumb, 734 bytes, Stack size 104 bytes, cefilter.o(i.ceFilter_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ceFilter_filter &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilter_checkFilterType
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cefilter.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>ceFilter_initial</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, cefilter.o(i.ceFilter_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceFilter_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cefilter.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>ceGpio_getBit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cegpio.o(i.ceGpio_getBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceGpio_getBit
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cegpio.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>ceGpio_initial</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cegpio.o(i.ceGpio_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceGpio_initial &rArr; ceGpio_setMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceGpio_setMode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeGpio
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cegpio.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>ceGpio_resetBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cegpio.o(i.ceGpio_resetBit))
<BR>[Address Reference Count : 1]<UL><LI> cegpio.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>ceGpio_setBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cegpio.o(i.ceGpio_setBit))
<BR>[Address Reference Count : 1]<UL><LI> cegpio.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>ceGpio_setMode</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cegpio.o(i.ceGpio_setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceGpio_setMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeGpio
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceGpio_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cegpio.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>ceI2cMasterAck</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cei2c.o(i.ceI2cMasterAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceI2cMasterAck &rArr; ceSetI2cMasterSDAMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSetI2cMasterSDAMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_recvByte
</UL>

<P><STRONG><a name="[18e]"></a>ceI2cMasterNAck</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cei2c.o(i.ceI2cMasterNAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceI2cMasterNAck &rArr; ceSetI2cMasterSDAMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSetI2cMasterSDAMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_recvByte
</UL>

<P><STRONG><a name="[66]"></a>ceI2cMaster_initial</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, cei2c.o(i.ceI2cMaster_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceI2cMaster_initial &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeI2cMaster
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cei2c.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>ceI2cMaster_lockBus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cei2c.o(i.ceI2cMaster_lockBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceI2cMaster_lockBus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cei2c.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>ceI2cMaster_recvByte</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, cei2c.o(i.ceI2cMaster_recvByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ceI2cMaster_recvByte &rArr; ceI2cMasterNAck &rArr; ceSetI2cMasterSDAMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSetI2cMasterSDAMode
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMasterNAck
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMasterAck
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeI2cMaster
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cei2c.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>ceI2cMaster_sendByte</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cei2c.o(i.ceI2cMaster_sendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceI2cMaster_sendByte &rArr; ceSetI2cMasterSDAMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSetI2cMasterSDAMode
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeI2cMaster
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cei2c.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>ceI2cMaster_start</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cei2c.o(i.ceI2cMaster_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ceI2cMaster_start &rArr; ceSetI2cMasterSDAMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSetI2cMasterSDAMode
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeI2cMaster
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cei2c.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>ceI2cMaster_stop</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cei2c.o(i.ceI2cMaster_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ceI2cMaster_stop &rArr; ceSetI2cMasterSDAMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSetI2cMasterSDAMode
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeI2cMaster
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_waitAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cei2c.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>ceI2cMaster_unlockBus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cei2c.o(i.ceI2cMaster_unlockBus))
<BR>[Address Reference Count : 1]<UL><LI> cei2c.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>ceI2cMaster_waitAck</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cei2c.o(i.ceI2cMaster_waitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ceI2cMaster_waitAck &rArr; ceI2cMaster_stop &rArr; ceSetI2cMasterSDAMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSetI2cMasterSDAMode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_stop
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeI2cMaster
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cei2c.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>ceInt_getBit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ceint.o(i.ceInt_getBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceInt_getBit &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeInt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceint.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>ceInt_initial</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, ceint.o(i.ceInt_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceInt_initial &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeInt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceint.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>ceInt_setMode</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ceint.o(i.ceInt_setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceInt_setMode &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeInt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceint.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>ceInt_start</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ceint.o(i.ceInt_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceInt_start &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeInt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceint.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>ceInt_stop</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ceint.o(i.ceInt_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceInt_stop &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeInt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceint.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>ceItoa</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, ceextra.o(i.ceItoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceItoa &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>ceLed1C_TickCallBack</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, celed1c.o(i.ceLed1C_TickCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceLed1C_TickCallBack
</UL>
<BR>[Address Reference Count : 2]<UL><LI> celed1c.o(i.ceLed1C_initialByGpio)
<LI> celed1c.o(i.ceLed1C_initialByPwm)
</UL>
<P><STRONG><a name="[c7]"></a>ceLed1C_initialByGpio</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, celed1c.o(i.ceLed1C_initialByGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceLed1C_initialByGpio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> celed1c.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>ceLed1C_initialByPwm</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, celed1c.o(i.ceLed1C_initialByPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceLed1C_initialByPwm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> celed1c.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>ceLed1C_setBreath</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, celed1c.o(i.ceLed1C_setBreath))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceLed1C_setBreath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> celed1c.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>ceLed1C_setFlash</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, celed1c.o(i.ceLed1C_setFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceLed1C_setFlash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> celed1c.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>ceLed1C_setOff</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, celed1c.o(i.ceLed1C_setOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceLed1C_setOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> celed1c.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>ceLed1C_setOn</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, celed1c.o(i.ceLed1C_setOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceLed1C_setOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> celed1c.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>ceMDCtl_initial</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cemdctl.o(i.ceMDCtl_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceMDCtl_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cemdctl.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>ceMDCtl_setDriverPower</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cemdctl.o(i.ceMDCtl_setDriverPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceMDCtl_setDriverPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cemdctl.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>ceMD_initial</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cemd.o(i.ceMD_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceMD_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cemd.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>ceMD_setDriverPower</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cemd.o(i.ceMD_setDriverPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ceMD_setDriverPower &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cemd.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>ceMPU6050_I2C_ReadOneByte</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, cempu6050.o(i.ceMPU6050_I2C_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceMPU6050_I2C_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_initial
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_getGyroscope
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_getAcceleration
</UL>

<P><STRONG><a name="[197]"></a>ceMPU6050_I2C_WriteOneByte</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cempu6050.o(i.ceMPU6050_I2C_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceMPU6050_I2C_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_initial
</UL>

<P><STRONG><a name="[e1]"></a>ceMPU6050_getAcceleration</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, cempu6050.o(i.ceMPU6050_getAcceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceMPU6050_getAcceleration &rArr; ceMPU6050_I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_I2C_ReadOneByte
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cempu6050.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>ceMPU6050_getGyroscope</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, cempu6050.o(i.ceMPU6050_getGyroscope))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ceMPU6050_getGyroscope &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_I2C_ReadOneByte
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cempu6050.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>ceMPU6050_initial</STRONG> (Thumb, 458 bytes, Stack size 48 bytes, cempu6050.o(i.ceMPU6050_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ceMPU6050_initial &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_I2C_WriteOneByte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_I2C_ReadOneByte
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cempu6050.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>ceNRF24L01P_check</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, cenrf24l01p.o(i.ceNRF24L01P_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceNRF24L01P_check &rArr; ceNRF24L01P_writeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_writeBuf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_readBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_initial
</UL>

<P><STRONG><a name="[e3]"></a>ceNRF24L01P_initial</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, cenrf24l01p.o(i.ceNRF24L01P_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ceNRF24L01P_initial &rArr; ceNRF24L01P_check &rArr; ceNRF24L01P_writeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cenrf24l01p.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>ceNRF24L01P_intCallBack</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cenrf24l01p.o(i.ceNRF24L01P_intCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceNRF24L01P_intCallBack &rArr; ceNRF24L01P_rxPacket &rArr; ceNRF24L01P_readBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_rxPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cenrf24l01p.o(i.ceNRF24L01P_initial)
</UL>
<P><STRONG><a name="[19a]"></a>ceNRF24L01P_readBuf</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, cenrf24l01p.o(i.ceNRF24L01P_readBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ceNRF24L01P_readBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_rxPacket
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_check
</UL>

<P><STRONG><a name="[19d]"></a>ceNRF24L01P_readReg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cenrf24l01p.o(i.ceNRF24L01P_readReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceNRF24L01P_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_txPacket
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_rxPacket
</UL>

<P><STRONG><a name="[e5]"></a>ceNRF24L01P_recv</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cenrf24l01p.o(i.ceNRF24L01P_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ceNRF24L01P_recv &rArr; ceNRF24L01P_setRecvMode &rArr; ceNRF24L01P_writeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_setRecvMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cenrf24l01p.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>ceNRF24L01P_rxPacket</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cenrf24l01p.o(i.ceNRF24L01P_rxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceNRF24L01P_rxPacket &rArr; ceNRF24L01P_readBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_writeReg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_readReg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_readBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_intCallBack
</UL>

<P><STRONG><a name="[e4]"></a>ceNRF24L01P_send</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cenrf24l01p.o(i.ceNRF24L01P_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ceNRF24L01P_send &rArr; ceNRF24L01P_txPacket &rArr; ceNRF24L01P_writeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_txPacket
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_setSendMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cenrf24l01p.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>ceNRF24L01P_setRecvMode</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, cenrf24l01p.o(i.ceNRF24L01P_setRecvMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceNRF24L01P_setRecvMode &rArr; ceNRF24L01P_writeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_writeReg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_recv
</UL>

<P><STRONG><a name="[19f]"></a>ceNRF24L01P_setSendMode</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, cenrf24l01p.o(i.ceNRF24L01P_setSendMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceNRF24L01P_setSendMode &rArr; ceNRF24L01P_writeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_writeReg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_send
</UL>

<P><STRONG><a name="[1a0]"></a>ceNRF24L01P_txPacket</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, cenrf24l01p.o(i.ceNRF24L01P_txPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ceNRF24L01P_txPacket &rArr; ceNRF24L01P_writeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_writeReg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_writeBuf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_send
</UL>

<P><STRONG><a name="[199]"></a>ceNRF24L01P_writeBuf</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, cenrf24l01p.o(i.ceNRF24L01P_writeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ceNRF24L01P_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_txPacket
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_setSendMode
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_setRecvMode
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_check
</UL>

<P><STRONG><a name="[19e]"></a>ceNRF24L01P_writeReg</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cenrf24l01p.o(i.ceNRF24L01P_writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceNRF24L01P_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_txPacket
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_setSendMode
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_setRecvMode
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceNRF24L01P_rxPacket
</UL>

<P><STRONG><a name="[ce]"></a>cePC33V_getVoltage</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cepc33v.o(i.cePC33V_getVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cePC33V_getVoltage &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepc33v.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>cePC33V_initial</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cepc33v.o(i.cePC33V_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cePC33V_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepc33v.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>cePID_calculate</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, cepid.o(i.cePID_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cePID_calculate &rArr; cePID_calculateRoll &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_resetErrByAccelerator
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateYaw
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateRoll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculatePitch
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateDriverPower
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateAltitude
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateAccelerator
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepid.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>cePID_calculateAccelerator</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, cepid.o(i.cePID_calculateAccelerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cePID_calculateAccelerator &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculate
</UL>

<P><STRONG><a name="[1a7]"></a>cePID_calculateAltitude</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, cepid.o(i.cePID_calculateAltitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cePID_calculateAltitude &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculate
</UL>

<P><STRONG><a name="[1a8]"></a>cePID_calculateDriverPower</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, cepid.o(i.cePID_calculateDriverPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cePID_calculateDriverPower &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculate
</UL>

<P><STRONG><a name="[1a3]"></a>cePID_calculatePitch</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, cepid.o(i.cePID_calculatePitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cePID_calculatePitch &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculate
</UL>

<P><STRONG><a name="[1a4]"></a>cePID_calculateRoll</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, cepid.o(i.cePID_calculateRoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cePID_calculateRoll &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculate
</UL>

<P><STRONG><a name="[1a5]"></a>cePID_calculateYaw</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, cepid.o(i.cePID_calculateYaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cePID_calculateYaw &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculate
</UL>

<P><STRONG><a name="[ef]"></a>cePID_initial</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, cepid.o(i.cePID_initial))
<BR>[Address Reference Count : 1]<UL><LI> cepid.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>cePID_resetErrByAccelerator</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cepid.o(i.cePID_resetErrByAccelerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cePID_resetErrByAccelerator &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculate
</UL>

<P><STRONG><a name="[f3]"></a>cePackage_dealRecv</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, cepackage.o(i.cePackage_dealRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cePackage_dealRecv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepackage.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>cePackage_dealSend</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, cepackage.o(i.cePackage_dealSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cePackage_dealSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepackage.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>cePackage_initial</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cepackage.o(i.cePackage_initial))
<BR>[Address Reference Count : 1]<UL><LI> cepackage.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>ceParCtl_afterFilterHook</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, ceparctl.o(i.ceParCtl_afterFilterHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceParCtl_afterFilterHook &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceparctl.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>ceParCtl_afterPIDHook</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ceparctl.o(i.ceParCtl_afterPIDHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceParCtl_afterPIDHook &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceparctl.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>ceParCtl_beforeFilterHook</STRONG> (Thumb, 476 bytes, Stack size 8 bytes, ceparctl.o(i.ceParCtl_beforeFilterHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceParCtl_beforeFilterHook &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceparctl.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>ceParCtl_beforePIDHook</STRONG> (Thumb, 470 bytes, Stack size 8 bytes, ceparctl.o(i.ceParCtl_beforePIDHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceParCtl_beforePIDHook &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceparctl.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>ceParCtl_initial</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ceparctl.o(i.ceParCtl_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceParCtl_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceparctl.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>ceParCtl_recvDataCallBack</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ceparctl.o(i.ceParCtl_recvDataCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceParCtl_recvDataCallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceparctl.o(i.ceParCtl_initial)
</UL>
<P><STRONG><a name="[117]"></a>ceParCtl_recvDataHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ceparctl.o(i.ceParCtl_recvDataHook))
<BR>[Address Reference Count : 1]<UL><LI> ceparctl.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>ceParCtl_sendDataHook</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ceparctl.o(i.ceParCtl_sendDataHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ceParCtl_sendDataHook &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceparctl.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>cePwm_initial</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, cepwm.o(i.cePwm_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cePwm_initial &rArr; ceCalPwmPrescalerAndPeriod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCePwm
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCalPwmPrescalerAndPeriod
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepwm.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>cePwm_resetBit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cepwm.o(i.cePwm_resetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cePwm_resetBit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCePwm
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepwm.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>cePwm_setBit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cepwm.o(i.cePwm_setBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cePwm_setBit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCePwm
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepwm.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>cePwm_start</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, cepwm.o(i.cePwm_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cePwm_start &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCePwm
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepwm.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>cePwm_stop</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cepwm.o(i.cePwm_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cePwm_stop &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCePwm
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepwm.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>cePwm_updata</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, cepwm.o(i.cePwm_updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cePwm_updata &rArr; ceCalPwmPrescalerAndPeriod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCePwm
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCalPwmPrescalerAndPeriod
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cepwm.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>ceSensor_getAcc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cesensor.o(i.ceSensor_getAcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceSensor_getAcc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesensor.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>ceSensor_getAlt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cesensor.o(i.ceSensor_getAlt))
<BR>[Address Reference Count : 1]<UL><LI> cesensor.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>ceSensor_getGps</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cesensor.o(i.ceSensor_getGps))
<BR>[Address Reference Count : 1]<UL><LI> cesensor.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>ceSensor_getGyr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cesensor.o(i.ceSensor_getGyr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceSensor_getGyr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesensor.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>ceSensor_getMag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cesensor.o(i.ceSensor_getMag))
<BR>[Address Reference Count : 1]<UL><LI> cesensor.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>ceSensor_getTem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cesensor.o(i.ceSensor_getTem))
<BR>[Address Reference Count : 1]<UL><LI> cesensor.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>ceSensor_initial</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cesensor.o(i.ceSensor_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceSensor_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesensor.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>ceSetI2cMasterSDAMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cei2c.o(i.ceSetI2cMasterSDAMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceSetI2cMasterSDAMode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_waitAck
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_stop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_sendByte
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_recvByte
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMasterNAck
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMasterAck
</UL>

<P><STRONG><a name="[7c]"></a>ceSpiMasterByte_writeRead</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cespi.o(i.ceSpiMasterByte_writeRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceSpiMasterByte_writeRead &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckSpiMaster
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cespi.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>ceSpiMaster_initial</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, cespi.o(i.ceSpiMaster_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceSpiMaster_initial &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckSpiMaster
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cespi.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>ceSpiMaster_lockBus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cespi.o(i.ceSpiMaster_lockBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceSpiMaster_lockBus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cespi.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>ceSpiMaster_resetNSSBit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cespi.o(i.ceSpiMaster_resetNSSBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceSpiMaster_resetNSSBit &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckSpiMaster
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cespi.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>ceSpiMaster_setNSSBit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cespi.o(i.ceSpiMaster_setNSSBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceSpiMaster_setNSSBit &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckSpiMaster
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cespi.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>ceSpiMaster_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cespi.o(i.ceSpiMaster_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceSpiMaster_start &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckSpiMaster
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cespi.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>ceSpiMaster_stop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cespi.o(i.ceSpiMaster_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceSpiMaster_stop &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckSpiMaster
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cespi.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>ceSpiMaster_unlockBus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cespi.o(i.ceSpiMaster_unlockBus))
<BR>[Address Reference Count : 1]<UL><LI> cespi.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>ceStatus_getHopeStatus</STRONG> (Thumb, 888 bytes, Stack size 24 bytes, cestatus.o(i.ceStatus_getHopeStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceStatus_getHopeStatus &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cestatus.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>ceStatus_getNowStatus</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, cestatus.o(i.ceStatus_getNowStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceStatus_getNowStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cestatus.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>ceStatus_initial</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cestatus.o(i.ceStatus_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceStatus_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cestatus.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>ceStrcmp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ceextra.o(i.ceStrcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceStrcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>ceStrcpy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ceextra.o(i.ceStrcpy))
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>ceStrlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ceextra.o(i.ceStrlen))
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>ceSysCtl_callBack</STRONG> (Thumb, 726 bytes, Stack size 8 bytes, cesysctl.o(i.ceSysCtl_callBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceSysCtl_callBack &rArr; ceSysCtl_set4Led
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSysCtl_set4Led
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesysctl.o(i.ceSysCtl_initial)
</UL>
<P><STRONG><a name="[10c]"></a>ceSysCtl_checkConnectStatus</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cesysctl.o(i.ceSysCtl_checkConnectStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceSysCtl_checkConnectStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesysctl.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>ceSysCtl_getBatVol</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cesysctl.o(i.ceSysCtl_getBatVol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceSysCtl_getBatVol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesysctl.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>ceSysCtl_getBtnSta</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cesysctl.o(i.ceSysCtl_getBtnSta))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceSysCtl_getBtnSta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesysctl.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>ceSysCtl_getMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cesysctl.o(i.ceSysCtl_getMode))
<BR>[Address Reference Count : 1]<UL><LI> cesysctl.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>ceSysCtl_getSysRunCycle</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cesysctl.o(i.ceSysCtl_getSysRunCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceSysCtl_getSysRunCycle &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesysctl.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>ceSysCtl_initial</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, cesysctl.o(i.ceSysCtl_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceSysCtl_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesysctl.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>ceSysCtl_set4Led</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cesysctl.o(i.ceSysCtl_set4Led))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceSysCtl_set4Led
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSysCtl_callBack
</UL>

<P><STRONG><a name="[109]"></a>ceSysCtl_setAlarm</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, cesysctl.o(i.ceSysCtl_setAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceSysCtl_setAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesysctl.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>ceSysCtl_setMode</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cesysctl.o(i.ceSysCtl_setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceSysCtl_setMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesysctl.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>ceSystem_GolbalInterruptInitial</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cesystem.o(i.ceSystem_GolbalInterruptInitial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceSystem_GolbalInterruptInitial
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_initial
</UL>

<P><STRONG><a name="[5d]"></a>ceSystem_callBackTickTimer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cesystem.o(i.ceSystem_callBackTickTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceSystem_callBackTickTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(i.ceSystem_initialTickTimer)
</UL>
<P><STRONG><a name="[84]"></a>ceSystem_delayMs</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, cesystem.o(i.ceSystem_delayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ceSystem_delayMs &rArr; ceSystem_getSystemTickUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_getSystemTickUs
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>ceSystem_delayNs</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cesystem.o(i.ceSystem_delayNs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ceSystem_delayNs &rArr; ceSystem_delayUs &rArr; ceSystem_getSystemTickUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_delayUs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>ceSystem_delayUs</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, cesystem.o(i.ceSystem_delayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ceSystem_delayUs &rArr; ceSystem_getSystemTickUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_getSystemTickUs
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_delayNs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>ceSystem_getErrorMsg</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, cesystem.o(i.ceSystem_getErrorMsg))
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>ceSystem_getSystemTickMs</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cesystem.o(i.ceSystem_getSystemTickMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ceSystem_getSystemTickMs &rArr; ceSystem_getSystemTickUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_getSystemTickUs
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>ceSystem_getSystemTickUs</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cesystem.o(i.ceSystem_getSystemTickUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ceSystem_getSystemTickUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_getSystemTickMs
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_delayUs
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_delayMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>ceSystem_initial</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cesystem.o(i.ceSystem_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceSystem_initial &rArr; ceSystem_initialTickTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_initialTickTimer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_GolbalInterruptInitial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(.constdata)
</UL>
<P><STRONG><a name="[1bd]"></a>ceSystem_initialTickTimer</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cesystem.o(i.ceSystem_initialTickTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceSystem_initialTickTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_initial
</UL>

<P><STRONG><a name="[105]"></a>ceTMCtl_checkConnectStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cetmctl.o(i.ceTMCtl_checkConnectStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceTMCtl_checkConnectStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetmctl.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>ceTMCtl_getSendIntervalMs</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cetmctl.o(i.ceTMCtl_getSendIntervalMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceTMCtl_getSendIntervalMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetmctl.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>ceTMCtl_initial</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, cetmctl.o(i.ceTMCtl_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceTMCtl_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetmctl.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>ceTMCtl_recvCallBack</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cetmctl.o(i.ceTMCtl_recvCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceTMCtl_recvCallBack
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cetmctl.o(i.ceTMCtl_sendData)
<LI> cetmctl.o(i.ceTMCtl_initial)
</UL>
<P><STRONG><a name="[104]"></a>ceTMCtl_sendData</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, cetmctl.o(i.ceTMCtl_sendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceTMCtl_sendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetmctl.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>ceTask_getCriticalStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cetask.o(i.ceTask_getCriticalStatus))
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>ceTask_inCriticalSection</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cetask.o(i.ceTask_inCriticalSection))
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>ceTask_mainTask</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cetask.o(i.ceTask_mainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceTask_mainTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>ceTask_outCriticalSection</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cetask.o(i.ceTask_outCriticalSection))
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>ceTask_register</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cetask.o(i.ceTask_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceTask_register &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>ceTask_start</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cetask.o(i.ceTask_start))
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>ceTask_stop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cetask.o(i.ceTask_stop))
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>ceTask_taskSchedule</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cetask.o(i.ceTask_taskSchedule))
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>ceTask_unRegister</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cetask.o(i.ceTask_unRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceTask_unRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>ceTicker_callBySystem</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ceticker.o(i.ceTicker_callBySystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceTicker_callBySystem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceticker.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>ceTicker_register</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ceticker.o(i.ceTicker_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceTicker_register &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeTicker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceticker.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>ceTicker_start</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ceticker.o(i.ceTicker_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceTicker_start &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeTicker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceticker.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>ceTicker_unRegister</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ceticker.o(i.ceTicker_unRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceTicker_unRegister &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeTicker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceticker.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>ceTimer_getTimerMaxCnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cetimer.o(i.ceTimer_getTimerMaxCnt))
<BR>[Address Reference Count : 1]<UL><LI> cetimer.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>ceTimer_getTimreNowCnt</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cetimer.o(i.ceTimer_getTimreNowCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceTimer_getTimreNowCnt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetimer.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>ceTimer_initial</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, cetimer.o(i.ceTimer_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ceTimer_initial &rArr; ceCalTimerPrescalerAndPeriod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeTimer
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCalTimerPrescalerAndPeriod
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetimer.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>ceTimer_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cetimer.o(i.ceTimer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceTimer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetimer.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>ceTimer_stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cetimer.o(i.ceTimer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceTimer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetimer.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>ceTimer_upData</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, cetimer.o(i.ceTimer_upData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ceTimer_upData &rArr; ceCalTimerPrescalerAndPeriod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeTimer
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCalTimerPrescalerAndPeriod
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetimer.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>ceUart_clearRecvBuf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ceuart.o(i.ceUart_clearRecvBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceUart_clearRecvBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceuart.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>ceUart_getRecvDataCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ceuart.o(i.ceUart_getRecvDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceUart_getRecvDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceuart.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>ceUart_initial</STRONG> (Thumb, 970 bytes, Stack size 104 bytes, ceuart.o(i.ceUart_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ceUart_initial &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeUart
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceuart.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>ceUart_readData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ceuart.o(i.ceUart_readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceUart_readData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceuart.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>ceUart_sendData</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ceuart.o(i.ceUart_sendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceUart_sendData &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeUart
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceuart.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>ceUart_start</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ceuart.o(i.ceUart_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceUart_start &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeUart
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceuart.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>ceUart_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ceuart.o(i.ceUart_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceUart_stop &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeUart
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceuart.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>ce_assert_failed</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cesystem.o(i.ce_assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ce_assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_sendData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_upData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_start
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_setNSSBit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_resetNSSBit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMaster_initial
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSpiMasterByte_writeRead
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_updata
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_stop
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_setBit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_resetBit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePwm_initial
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_stop
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_setMode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_getBit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_waitAck
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_stop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_sendByte
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_recvByte
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceI2cMaster_initial
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceGpio_setMode
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceGpio_initial
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAd_initial
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTicker_unRegister
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTicker_start
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTicker_register
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTicker_stop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTask_register
</UL>

<P><STRONG><a name="[122]"></a>main</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[103]"></a>setRecvCallBack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cetmctl.o(i.setRecvCallBack))
<BR>[Address Reference Count : 1]<UL><LI> cetmctl.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterBase_initial
</UL>

<P><STRONG><a name="[158]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilter_filter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterIMU_filter
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_initial
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_getGyroscope
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilter_filter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterIMU_filter
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterBase_initial
</UL>

<P><STRONG><a name="[1ca]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1cd]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1d0]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[1d5]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_initial
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_getGyroscope
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilter_filter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterIMU_filter
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1d2]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1d3]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[21c]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[14c]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[21d]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[177]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
</UL>

<P><STRONG><a name="[1d4]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[21e]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[148]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilter_filter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterIMU_filter
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1d6]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1cc]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[1cf]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1d7]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1c9]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1d9]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_initial
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_getGyroscope
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilter_filter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterIMU_filter
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterBase_initial
</UL>

<P><STRONG><a name="[1da]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_initial
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceStatus_getHopeStatus
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilter_filter
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterYijie_filter
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterSlider_filter
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterKalman_filter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterIMU_filter
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterErjie_filter
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterBase_filter
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateYaw
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateRoll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculatePitch
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateDriverPower
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateAltitude
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateAccelerator
</UL>

<P><STRONG><a name="[1dc]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1e0]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_initial
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_getAcceleration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePC33V_getVoltage
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceParCtl_beforePIDHook
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceParCtl_beforeFilterHook
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceStatus_getHopeStatus
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSysCtl_getSysRunCycle
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilter_filter
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterSlider_filter
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterKalman_filter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterIMU_filter
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterBase_initial
</UL>

<P><STRONG><a name="[1de]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceStatus_getHopeStatus
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateAltitude
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateAccelerator
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculate
</UL>

<P><STRONG><a name="[1df]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceParCtl_sendDataHook
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceParCtl_beforeFilterHook
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceParCtl_afterPIDHook
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceParCtl_afterFilterHook
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateDriverPower
</UL>

<P><STRONG><a name="[1e1]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_initial
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_getGyroscope
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_getAcceleration
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceParCtl_beforePIDHook
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceParCtl_beforeFilterHook
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceStatus_getHopeStatus
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTMCtl_checkConnectStatus
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterBase_initial
</UL>

<P><STRONG><a name="[21f]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[1b9]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSysCtl_getSysRunCycle
</UL>

<P><STRONG><a name="[220]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[221]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[222]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[188]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePC33V_getVoltage
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterSlider_filter
</UL>

<P><STRONG><a name="[223]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[15d]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAbs
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceStatus_getHopeStatus
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_resetErrByAccelerator
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateYaw
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateRoll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculatePitch
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateAltitude
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateAccelerator
</UL>

<P><STRONG><a name="[1e2]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[1e5]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePC33V_getVoltage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceParCtl_sendDataHook
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceParCtl_beforeFilterHook
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceParCtl_afterFilterHook
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilter_filter
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterYijie_filter
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterKalman_filter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterIMU_filter
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterErjie_filter
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterBase_initial
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterBase_filter
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateYaw
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateRoll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculatePitch
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateAltitude
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateAccelerator
</UL>

<P><STRONG><a name="[1e3]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1db]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[1cb]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceStatus_getHopeStatus
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSysCtl_getSysRunCycle
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTMCtl_checkConnectStatus
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterBase_filter
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateYaw
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateRoll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculatePitch
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateAltitude
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateAccelerator
</UL>

<P><STRONG><a name="[1e4]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceStatus_getHopeStatus
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterKalman_filter
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterBase_filter
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateRoll
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateAccelerator
</UL>

<P><STRONG><a name="[1e6]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceMPU6050_getGyroscope
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceStatus_getHopeStatus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterYijie_filter
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterKalman_filter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterIMU_filter
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterErjie_filter
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceFilterBase_filter
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateYaw
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateRoll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculatePitch
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateDriverPower
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cePID_calculateAltitude
</UL>

<P><STRONG><a name="[1e8]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1d1]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[14d]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1e9]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[137]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[138]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1d8]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[1ce]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1e7]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[1dd]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
