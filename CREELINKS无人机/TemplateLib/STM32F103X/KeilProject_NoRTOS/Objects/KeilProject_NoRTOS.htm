<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\KeilProject_NoRTOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\KeilProject_NoRTOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Mon Jul 03 20:18:14 2017
<BR><P>
<H3>Maximum Stack Usage =        172 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ceUart_initial &rArr; USART_Init &rArr; RCC_GetClocksFreq
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a2]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from cead.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_IRQHandler</a> from ceuart.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_IRQHandler</a> from ceuart.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel7_IRQHandler</a> from ceuart.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel3_IRQHandler</a> from ceda.o(i.DMA2_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">DMA2_Channel4_5_IRQHandler</a> from ceda.o(i.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from ceint.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from ceint.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from ceint.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from ceint.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from ceint.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from ceint.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from ceint.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[10]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_UP_IRQHandler</a> from cetimer.o(i.TIM1_UP_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from ceccp.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from cetimer.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from cetimer.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM5_IRQHandler</a> from cetimer.o(i.TIM5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM6_IRQHandler</a> from cetimer.o(i.TIM6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM7_IRQHandler</a> from cetimer.o(i.TIM7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_UP_IRQHandler</a> from cetimer.o(i.TIM8_UP_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">UART4_IRQHandler</a> from ceuart.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">UART5_IRQHandler</a> from ceuart.o(i.UART5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USART1_IRQHandler</a> from ceuart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from ceuart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from ceuart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[91]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[8e]">cTicker_stop</a> from ceticker.o(i.cTicker_stop) referenced from ceticker.o(.constdata)
 <LI><a href="#[6e]">ceAbs</a> from ceextra.o(i.ceAbs) referenced from ceextra.o(.constdata)
 <LI><a href="#[73]">ceAtoi</a> from ceextra.o(i.ceAtoi) referenced from ceextra.o(.constdata)
 <LI><a href="#[6d]">ceDebug_getRecvData</a> from cedebug.o(i.ceDebug_getRecvData) referenced from cedebug.o(.constdata)
 <LI><a href="#[6c]">ceDebug_getRecvDataCount</a> from cedebug.o(i.ceDebug_getRecvDataCount) referenced from cedebug.o(.constdata)
 <LI><a href="#[67]">ceDebug_initial</a> from cedebug.o(i.ceDebug_initial) referenced from cedebug.o(.constdata)
 <LI><a href="#[6a]">ceDebug_printf</a> from cedebug.o(i.ceDebug_printf) referenced from cedebug.o(.constdata)
 <LI><a href="#[68]">ceDebug_registerAppendString</a> from cedebug.o(i.ceDebug_registerAppendString) referenced from cedebug.o(.constdata)
 <LI><a href="#[6b]">ceDebug_sprintf</a> from cedebug.o(i.ceDebug_sprintf) referenced from cedebug.o(.constdata)
 <LI><a href="#[69]">ceDebug_unRegisterAppendString</a> from cedebug.o(i.ceDebug_unRegisterAppendString) referenced from cedebug.o(.constdata)
 <LI><a href="#[82]">ceDoubleFifo_clear</a> from ceextra.o(i.ceDoubleFifo_clear) referenced from ceextra.o(.constdata)
 <LI><a href="#[7e]">ceDoubleFifo_getCanReadSize</a> from ceextra.o(i.ceDoubleFifo_getCanReadSize) referenced from ceextra.o(.constdata)
 <LI><a href="#[7f]">ceDoubleFifo_getCanWriteSize</a> from ceextra.o(i.ceDoubleFifo_getCanWriteSize) referenced from ceextra.o(.constdata)
 <LI><a href="#[7c]">ceDoubleFifo_initial</a> from ceextra.o(i.ceDoubleFifo_initial) referenced from ceextra.o(.constdata)
 <LI><a href="#[7d]">ceDoubleFifo_isEmpty</a> from ceextra.o(i.ceDoubleFifo_isEmpty) referenced from ceextra.o(.constdata)
 <LI><a href="#[81]">ceDoubleFifo_read</a> from ceextra.o(i.ceDoubleFifo_read) referenced from ceextra.o(.constdata)
 <LI><a href="#[80]">ceDoubleFifo_write</a> from ceextra.o(i.ceDoubleFifo_write) referenced from ceextra.o(.constdata)
 <LI><a href="#[7a]">ceFifo_clear</a> from ceextra.o(i.ceFifo_clear) referenced from ceextra.o(.constdata)
 <LI><a href="#[76]">ceFifo_getCanReadSize</a> from ceextra.o(i.ceFifo_getCanReadSize) referenced from ceextra.o(.constdata)
 <LI><a href="#[77]">ceFifo_getCanWriteSize</a> from ceextra.o(i.ceFifo_getCanWriteSize) referenced from ceextra.o(.constdata)
 <LI><a href="#[7b]">ceFifo_getWriteLockStatus</a> from ceextra.o(i.ceFifo_getWriteLockStatus) referenced from ceextra.o(.constdata)
 <LI><a href="#[74]">ceFifo_initial</a> from ceextra.o(i.ceFifo_initial) referenced from ceextra.o(.constdata)
 <LI><a href="#[75]">ceFifo_isEmpty</a> from ceextra.o(i.ceFifo_isEmpty) referenced from ceextra.o(.constdata)
 <LI><a href="#[79]">ceFifo_read</a> from ceextra.o(i.ceFifo_read) referenced from ceextra.o(.constdata)
 <LI><a href="#[78]">ceFifo_write</a> from ceextra.o(i.ceFifo_write) referenced from ceextra.o(.constdata)
 <LI><a href="#[52]">ceInt_getBit</a> from ceint.o(i.ceInt_getBit) referenced from ceint.o(.constdata)
 <LI><a href="#[4e]">ceInt_initial</a> from ceint.o(i.ceInt_initial) referenced from ceint.o(.constdata)
 <LI><a href="#[4f]">ceInt_setMode</a> from ceint.o(i.ceInt_setMode) referenced from ceint.o(.constdata)
 <LI><a href="#[50]">ceInt_start</a> from ceint.o(i.ceInt_start) referenced from ceint.o(.constdata)
 <LI><a href="#[51]">ceInt_stop</a> from ceint.o(i.ceInt_stop) referenced from ceint.o(.constdata)
 <LI><a href="#[72]">ceItoa</a> from ceextra.o(i.ceItoa) referenced from ceextra.o(.constdata)
 <LI><a href="#[70]">ceStrcmp</a> from ceextra.o(i.ceStrcmp) referenced from ceextra.o(.constdata)
 <LI><a href="#[71]">ceStrcpy</a> from ceextra.o(i.ceStrcpy) referenced from ceextra.o(.constdata)
 <LI><a href="#[6f]">ceStrlen</a> from ceextra.o(i.ceStrlen) referenced from ceextra.o(.constdata)
 <LI><a href="#[4c]">ceSystem_callBackTickTimer</a> from cesystem.o(i.ceSystem_callBackTickTimer) referenced from cesystem.o(i.ceSystem_initialTickTimer)
 <LI><a href="#[56]">ceSystem_delayMs</a> from cesystem.o(i.ceSystem_delayMs) referenced from cesystem.o(.constdata)
 <LI><a href="#[54]">ceSystem_delayNs</a> from cesystem.o(i.ceSystem_delayNs) referenced from cesystem.o(.constdata)
 <LI><a href="#[55]">ceSystem_delayUs</a> from cesystem.o(i.ceSystem_delayUs) referenced from cesystem.o(.constdata)
 <LI><a href="#[59]">ceSystem_getErrorMsg</a> from cesystem.o(i.ceSystem_getErrorMsg) referenced from cesystem.o(.constdata)
 <LI><a href="#[58]">ceSystem_getSystemTickMs</a> from cesystem.o(i.ceSystem_getSystemTickMs) referenced from cesystem.o(.constdata)
 <LI><a href="#[57]">ceSystem_getSystemTickUs</a> from cesystem.o(i.ceSystem_getSystemTickUs) referenced from cesystem.o(.constdata)
 <LI><a href="#[53]">ceSystem_initial</a> from cesystem.o(i.ceSystem_initial) referenced from cesystem.o(.constdata)
 <LI><a href="#[8a]">ceTask_getCriticalStatus</a> from cetask.o(i.ceTask_getCriticalStatus) referenced from cetask.o(.constdata)
 <LI><a href="#[88]">ceTask_inCriticalSection</a> from cetask.o(i.ceTask_inCriticalSection) referenced from cetask.o(.constdata)
 <LI><a href="#[83]">ceTask_mainTask</a> from cetask.o(i.ceTask_mainTask) referenced from cetask.o(.constdata)
 <LI><a href="#[89]">ceTask_outCriticalSection</a> from cetask.o(i.ceTask_outCriticalSection) referenced from cetask.o(.constdata)
 <LI><a href="#[84]">ceTask_register</a> from cetask.o(i.ceTask_register) referenced from cetask.o(.constdata)
 <LI><a href="#[85]">ceTask_start</a> from cetask.o(i.ceTask_start) referenced from cetask.o(.constdata)
 <LI><a href="#[86]">ceTask_stop</a> from cetask.o(i.ceTask_stop) referenced from cetask.o(.constdata)
 <LI><a href="#[8b]">ceTask_taskSchedule</a> from cetask.o(i.ceTask_taskSchedule) referenced from cetask.o(.constdata)
 <LI><a href="#[87]">ceTask_unRegister</a> from cetask.o(i.ceTask_unRegister) referenced from cetask.o(.constdata)
 <LI><a href="#[90]">ceTicker_callBySystem</a> from ceticker.o(i.ceTicker_callBySystem) referenced from ceticker.o(.constdata)
 <LI><a href="#[8c]">ceTicker_register</a> from ceticker.o(i.ceTicker_register) referenced from ceticker.o(.constdata)
 <LI><a href="#[8d]">ceTicker_start</a> from ceticker.o(i.ceTicker_start) referenced from ceticker.o(.constdata)
 <LI><a href="#[8f]">ceTicker_unRegister</a> from ceticker.o(i.ceTicker_unRegister) referenced from ceticker.o(.constdata)
 <LI><a href="#[5e]">ceTimer_getTimerMaxCnt</a> from cetimer.o(i.ceTimer_getTimerMaxCnt) referenced from cetimer.o(.constdata)
 <LI><a href="#[5f]">ceTimer_getTimreNowCnt</a> from cetimer.o(i.ceTimer_getTimreNowCnt) referenced from cetimer.o(.constdata)
 <LI><a href="#[5a]">ceTimer_initial</a> from cetimer.o(i.ceTimer_initial) referenced from cetimer.o(.constdata)
 <LI><a href="#[5b]">ceTimer_start</a> from cetimer.o(i.ceTimer_start) referenced from cetimer.o(.constdata)
 <LI><a href="#[5d]">ceTimer_stop</a> from cetimer.o(i.ceTimer_stop) referenced from cetimer.o(.constdata)
 <LI><a href="#[5c]">ceTimer_upData</a> from cetimer.o(i.ceTimer_upData) referenced from cetimer.o(.constdata)
 <LI><a href="#[66]">ceUart_clearRecvBuf</a> from ceuart.o(i.ceUart_clearRecvBuf) referenced from ceuart.o(.constdata)
 <LI><a href="#[63]">ceUart_getRecvDataCount</a> from ceuart.o(i.ceUart_getRecvDataCount) referenced from ceuart.o(.constdata)
 <LI><a href="#[60]">ceUart_initial</a> from ceuart.o(i.ceUart_initial) referenced from ceuart.o(.constdata)
 <LI><a href="#[64]">ceUart_readData</a> from ceuart.o(i.ceUart_readData) referenced from ceuart.o(.constdata)
 <LI><a href="#[62]">ceUart_sendData</a> from ceuart.o(i.ceUart_sendData) referenced from ceuart.o(.constdata)
 <LI><a href="#[61]">ceUart_start</a> from ceuart.o(i.ceUart_start) referenced from ceuart.o(.constdata)
 <LI><a href="#[65]">ceUart_stop</a> from ceuart.o(i.ceUart_stop) referenced from ceuart.o(.constdata)
 <LI><a href="#[4d]">intEventCallBack</a> from main.o(i.intEventCallBack) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[91]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[92]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[94]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f5]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f6]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[95]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[f7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[99]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[f8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[100]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[101]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[102]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[103]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[104]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[105]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[106]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[107]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[108]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[109]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[9e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[10d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[10e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[10f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[110]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[111]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[112]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[93]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[113]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[96]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[98]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[114]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[9a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[116]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[9f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCalTimerPrescalerAndPeriod
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_getSystemTickUs
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_getSystemTickMs
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_delayUs
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_delayMs
</UL>

<P><STRONG><a name="[117]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceItoa
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[9c]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[11e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[120]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>DAC_Cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_dac.o(i.DAC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>DAC_DMACmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dac.o(i.DAC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cead.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ceuart.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ceuart.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ceuart.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ceda.o(i.DMA2_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMACmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ceda.o(i.DMA2_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel4_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMACmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_sendData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
</UL>

<P><STRONG><a name="[b8]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>DMA_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
</UL>

<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ceint.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, ceint.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ceint.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ceint.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ceint.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ceint.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, ceint.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>EXTI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_stop
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_start
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GenerateSWInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
</UL>

<P><STRONG><a name="[ab]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
</UL>

<P><STRONG><a name="[d1]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
</UL>

<P><STRONG><a name="[d0]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
</UL>

<P><STRONG><a name="[ce]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_getBit
</UL>

<P><STRONG><a name="[d3]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_stop
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_start
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
</UL>

<P><STRONG><a name="[d8]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_GolbalInterruptInitial
</UL>

<P><STRONG><a name="[d7]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_GolbalInterruptInitial
</UL>

<P><STRONG><a name="[e1]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
</UL>

<P><STRONG><a name="[dc]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
</UL>

<P><STRONG><a name="[b3]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[cf]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
</UL>

<P><STRONG><a name="[b2]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[ba]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[4a]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cetimer.o(i.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_UP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ceccp.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cetimer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cetimer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM5_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cetimer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM6_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cetimer.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM7_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cetimer.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cetimer.o(i.TIM8_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM8_UP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_upData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_stop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_start
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_upData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_stop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_start
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
</UL>

<P><STRONG><a name="[af]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_upData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_stop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_start
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
</UL>

<P><STRONG><a name="[de]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_upData
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_start
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
</UL>

<P><STRONG><a name="[dd]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
</UL>

<P><STRONG><a name="[42]"></a>UART4_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, ceuart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART4_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART5_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, ceuart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART5_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ceuart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ceuart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ceuart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_stop
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_start
</UL>

<P><STRONG><a name="[e4]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
</UL>

<P><STRONG><a name="[e5]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_sendData
</UL>

<P><STRONG><a name="[b4]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_sendData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
</UL>

<P><STRONG><a name="[b7]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>cTicker_stop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ceticker.o(i.cTicker_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cTicker_stop &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeTicker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceticker.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>ceAbs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ceextra.o(i.ceAbs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceAbs &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>ceAtoi</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ceextra.o(i.ceAtoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceAtoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>ceCalTimerPrescalerAndPeriod</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, cetimer.o(i.ceCalTimerPrescalerAndPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ceCalTimerPrescalerAndPeriod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_upData
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
</UL>

<P><STRONG><a name="[cd]"></a>ceCheckCeInt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ceint.o(i.ceCheckCeInt))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_stop
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_start
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_setMode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_getBit
</UL>

<P><STRONG><a name="[da]"></a>ceCheckCeTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cetask.o(i.ceCheckCeTask))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTask_register
</UL>

<P><STRONG><a name="[bb]"></a>ceCheckCeTicker</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ceticker.o(i.ceCheckCeTicker))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTicker_unRegister
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTicker_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTicker_register
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTicker_stop
</UL>

<P><STRONG><a name="[db]"></a>ceCheckCeTimer</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cetimer.o(i.ceCheckCeTimer))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_upData
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
</UL>

<P><STRONG><a name="[e0]"></a>ceCheckCeUart</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ceuart.o(i.ceCheckCeUart))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_stop
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_sendData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
</UL>

<P><STRONG><a name="[6d]"></a>ceDebug_getRecvData</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cedebug.o(i.ceDebug_getRecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceDebug_getRecvData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cedebug.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>ceDebug_getRecvDataCount</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cedebug.o(i.ceDebug_getRecvDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceDebug_getRecvDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cedebug.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>ceDebug_initial</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, cedebug.o(i.ceDebug_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceDebug_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cedebug.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>ceDebug_printf</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, cedebug.o(i.ceDebug_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ceDebug_printf &rArr; ceDebug_printfFp64 &rArr; ceDebug_printfUint32 &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfUint32
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfStr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfInt32
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfHex
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfBin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cedebug.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>ceDebug_printfBin</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cedebug.o(i.ceDebug_printfBin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceDebug_printfBin &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_sprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printf
</UL>

<P><STRONG><a name="[c0]"></a>ceDebug_printfChar</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cedebug.o(i.ceDebug_printfChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceDebug_printfChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_sprintf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfUint32
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfStr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfInt32
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfHex
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfBin
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printf
</UL>

<P><STRONG><a name="[c3]"></a>ceDebug_printfFp64</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, cedebug.o(i.ceDebug_printfFp64))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ceDebug_printfFp64 &rArr; ceDebug_printfUint32 &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfUint32
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_sprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printf
</UL>

<P><STRONG><a name="[c6]"></a>ceDebug_printfHex</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cedebug.o(i.ceDebug_printfHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceDebug_printfHex &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_sprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printf
</UL>

<P><STRONG><a name="[c1]"></a>ceDebug_printfInt32</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, cedebug.o(i.ceDebug_printfInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceDebug_printfInt32 &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_sprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printf
</UL>

<P><STRONG><a name="[c4]"></a>ceDebug_printfStr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cedebug.o(i.ceDebug_printfStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceDebug_printfStr &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_sprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printf
</UL>

<P><STRONG><a name="[c2]"></a>ceDebug_printfUint32</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, cedebug.o(i.ceDebug_printfUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceDebug_printfUint32 &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_sprintf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printf
</UL>

<P><STRONG><a name="[68]"></a>ceDebug_registerAppendString</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, cedebug.o(i.ceDebug_registerAppendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceDebug_registerAppendString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cedebug.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>ceDebug_sprintf</STRONG> (Thumb, 410 bytes, Stack size 64 bytes, cedebug.o(i.ceDebug_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ceDebug_sprintf &rArr; ceDebug_printfFp64 &rArr; ceDebug_printfUint32 &rArr; ceDebug_printfChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfUint32
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfStr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfInt32
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfHex
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfChar
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfBin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cedebug.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>ceDebug_unRegisterAppendString</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cedebug.o(i.ceDebug_unRegisterAppendString))
<BR>[Address Reference Count : 1]<UL><LI> cedebug.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>ceDoubleFifo_clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ceextra.o(i.ceDoubleFifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceDoubleFifo_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>ceDoubleFifo_getCanReadSize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ceextra.o(i.ceDoubleFifo_getCanReadSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ceDoubleFifo_getCanReadSize &rArr; ceDoubleFifo_updata
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_updata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>ceDoubleFifo_getCanWriteSize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ceextra.o(i.ceDoubleFifo_getCanWriteSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ceDoubleFifo_getCanWriteSize &rArr; ceDoubleFifo_updata
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_updata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>ceDoubleFifo_initial</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ceextra.o(i.ceDoubleFifo_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceDoubleFifo_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>ceDoubleFifo_isEmpty</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ceextra.o(i.ceDoubleFifo_isEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ceDoubleFifo_isEmpty &rArr; ceDoubleFifo_updata
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_updata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>ceDoubleFifo_read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ceextra.o(i.ceDoubleFifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceDoubleFifo_read &rArr; ceDoubleFifo_updata
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_updata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>ceDoubleFifo_updata</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ceextra.o(i.ceDoubleFifo_updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceDoubleFifo_updata
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_read
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_isEmpty
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_getCanWriteSize
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_getCanReadSize
</UL>

<P><STRONG><a name="[80]"></a>ceDoubleFifo_write</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ceextra.o(i.ceDoubleFifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceDoubleFifo_write &rArr; ceDoubleFifo_updata
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDoubleFifo_updata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>ceFifo_clear</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ceextra.o(i.ceFifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceFifo_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>ceFifo_getCanReadSize</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ceextra.o(i.ceFifo_getCanReadSize))
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>ceFifo_getCanWriteSize</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ceextra.o(i.ceFifo_getCanWriteSize))
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>ceFifo_getWriteLockStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ceextra.o(i.ceFifo_getWriteLockStatus))
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>ceFifo_initial</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ceextra.o(i.ceFifo_initial))
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>ceFifo_isEmpty</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ceextra.o(i.ceFifo_isEmpty))
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>ceFifo_read</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ceextra.o(i.ceFifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceFifo_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>ceFifo_write</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ceextra.o(i.ceFifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ceFifo_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>ceInt_getBit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ceint.o(i.ceInt_getBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceInt_getBit &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeInt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceint.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>ceInt_initial</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, ceint.o(i.ceInt_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceInt_initial &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeInt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceint.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>ceInt_setMode</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ceint.o(i.ceInt_setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceInt_setMode &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeInt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceint.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>ceInt_start</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ceint.o(i.ceInt_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceInt_start &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeInt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceint.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>ceInt_stop</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ceint.o(i.ceInt_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceInt_stop &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeInt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceint.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>ceItoa</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, ceextra.o(i.ceItoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceItoa &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>ceStrcmp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ceextra.o(i.ceStrcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceStrcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>ceStrcpy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ceextra.o(i.ceStrcpy))
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>ceStrlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ceextra.o(i.ceStrlen))
<BR>[Address Reference Count : 1]<UL><LI> ceextra.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>ceSystem_GolbalInterruptInitial</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cesystem.o(i.ceSystem_GolbalInterruptInitial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceSystem_GolbalInterruptInitial
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_initial
</UL>

<P><STRONG><a name="[4c]"></a>ceSystem_callBackTickTimer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cesystem.o(i.ceSystem_callBackTickTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceSystem_callBackTickTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(i.ceSystem_initialTickTimer)
</UL>
<P><STRONG><a name="[56]"></a>ceSystem_delayMs</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, cesystem.o(i.ceSystem_delayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ceSystem_delayMs &rArr; ceSystem_getSystemTickUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_getSystemTickUs
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>ceSystem_delayNs</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cesystem.o(i.ceSystem_delayNs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ceSystem_delayNs &rArr; ceSystem_delayUs &rArr; ceSystem_getSystemTickUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_delayUs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>ceSystem_delayUs</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, cesystem.o(i.ceSystem_delayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ceSystem_delayUs &rArr; ceSystem_getSystemTickUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_getSystemTickUs
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_delayNs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>ceSystem_getErrorMsg</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, cesystem.o(i.ceSystem_getErrorMsg))
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>ceSystem_getSystemTickMs</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cesystem.o(i.ceSystem_getSystemTickMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ceSystem_getSystemTickMs &rArr; ceSystem_getSystemTickUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_getSystemTickUs
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>ceSystem_getSystemTickUs</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cesystem.o(i.ceSystem_getSystemTickUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ceSystem_getSystemTickUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_getSystemTickMs
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_delayUs
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_delayMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>ceSystem_initial</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cesystem.o(i.ceSystem_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceSystem_initial &rArr; ceSystem_initialTickTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_initialTickTimer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_GolbalInterruptInitial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cesystem.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>ceSystem_initialTickTimer</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cesystem.o(i.ceSystem_initialTickTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceSystem_initialTickTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceSystem_initial
</UL>

<P><STRONG><a name="[8a]"></a>ceTask_getCriticalStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cetask.o(i.ceTask_getCriticalStatus))
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>ceTask_inCriticalSection</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cetask.o(i.ceTask_inCriticalSection))
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>ceTask_mainTask</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cetask.o(i.ceTask_mainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceTask_mainTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>ceTask_outCriticalSection</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cetask.o(i.ceTask_outCriticalSection))
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>ceTask_register</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cetask.o(i.ceTask_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceTask_register &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>ceTask_start</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cetask.o(i.ceTask_start))
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>ceTask_stop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cetask.o(i.ceTask_stop))
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>ceTask_taskSchedule</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cetask.o(i.ceTask_taskSchedule))
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>ceTask_unRegister</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cetask.o(i.ceTask_unRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceTask_unRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetask.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>ceTicker_callBySystem</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ceticker.o(i.ceTicker_callBySystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceTicker_callBySystem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceticker.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>ceTicker_register</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ceticker.o(i.ceTicker_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceTicker_register &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeTicker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceticker.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>ceTicker_start</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ceticker.o(i.ceTicker_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceTicker_start &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeTicker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceticker.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>ceTicker_unRegister</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ceticker.o(i.ceTicker_unRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceTicker_unRegister &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeTicker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceticker.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>ceTimer_getTimerMaxCnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cetimer.o(i.ceTimer_getTimerMaxCnt))
<BR>[Address Reference Count : 1]<UL><LI> cetimer.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>ceTimer_getTimreNowCnt</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cetimer.o(i.ceTimer_getTimreNowCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceTimer_getTimreNowCnt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetimer.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>ceTimer_initial</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, cetimer.o(i.ceTimer_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ceTimer_initial &rArr; ceCalTimerPrescalerAndPeriod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeTimer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCalTimerPrescalerAndPeriod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetimer.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>ceTimer_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cetimer.o(i.ceTimer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceTimer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetimer.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>ceTimer_stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cetimer.o(i.ceTimer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceTimer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetimer.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>ceTimer_upData</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, cetimer.o(i.ceTimer_upData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ceTimer_upData &rArr; ceCalTimerPrescalerAndPeriod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeTimer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCalTimerPrescalerAndPeriod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cetimer.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>ceUart_clearRecvBuf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ceuart.o(i.ceUart_clearRecvBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceUart_clearRecvBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceuart.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>ceUart_getRecvDataCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ceuart.o(i.ceUart_getRecvDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ceUart_getRecvDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceuart.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>ceUart_initial</STRONG> (Thumb, 970 bytes, Stack size 104 bytes, ceuart.o(i.ceUart_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ceUart_initial &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeUart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceuart.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>ceUart_readData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ceuart.o(i.ceUart_readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceUart_readData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceuart.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>ceUart_sendData</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ceuart.o(i.ceUart_sendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ceUart_sendData &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeUart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceuart.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>ceUart_start</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ceuart.o(i.ceUart_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceUart_start &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeUart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceuart.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>ceUart_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ceuart.o(i.ceUart_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceUart_stop &rArr; ce_assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceCheckCeUart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ce_assert_failed
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ceuart.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>ce_assert_failed</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cesystem.o(i.ce_assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ce_assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_stop
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_sendData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceUart_initial
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_upData
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTimer_initial
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_stop
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_start
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_setMode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_initial
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceInt_getBit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTicker_unRegister
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTicker_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTicker_register
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTicker_stop
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceTask_register
</UL>

<P><STRONG><a name="[4d]"></a>intEventCallBack</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i.intEventCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intEventCallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[9b]"></a>main</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)

<P><STRONG><a name="[e7]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[ed]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
</UL>

<P><STRONG><a name="[eb]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
</UL>

<P><STRONG><a name="[124]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
</UL>

<P><STRONG><a name="[ec]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[125]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
</UL>

<P><STRONG><a name="[ee]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ea]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[e9]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceDebug_printfFp64
</UL>

<P><STRONG><a name="[ef]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[f1]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[f4]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceAbs
</UL>

<P><STRONG><a name="[f2]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[127]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[f3]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ad]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ae]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[f0]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[e8]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
